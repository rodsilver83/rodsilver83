import { Component, ElementRef, HostListener, ViewChild, ViewChildren, Renderer2, Injectable, ChangeDetectorRef, Directive, EventEmitter, Input, Output, ViewContainerRef, NgModule } from '@angular/core';
import { isBs3, Utils } from 'ngx-bootstrap/utils';
import { NgControl } from '@angular/forms';
import { from, isObservable } from 'rxjs';
import { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';
import { debounceTime, filter, mergeMap, switchMap, toArray } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { PositioningService } from 'ngx-bootstrap/positioning';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/* tslint:disable */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from 'ngx-bootstrap/component-loader';

const _c0 = ["ulElement"];
const _c1 = ["liElements"];
function TypeaheadContainerComponent_ng_template_0_Template(rf, ctx) { }
function TypeaheadContainerComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 4);
} if (rf & 2) {
    const match_r7 = ctx.match;
    const query_r8 = ctx.query;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHtml", ctx_r2.highlight(match_r7, query_r8), ɵngcc0.ɵɵsanitizeHtml);
} }
function TypeaheadContainerComponent_ng_template_3_ng_template_2_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 10, 11);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const match_r11 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(match_r11);
} }
function TypeaheadContainerComponent_ng_template_3_ng_template_2_li_1_ng_template_3_Template(rf, ctx) { }
const _c2 = function (a0, a1, a2, a3) { return { item: a0, index: a1, match: a2, query: a3 }; };
function TypeaheadContainerComponent_ng_template_3_ng_template_2_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 12, 11);
    ɵngcc0.ɵɵlistener("mouseenter", function TypeaheadContainerComponent_ng_template_3_ng_template_2_li_1_Template_li_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); const match_r11 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.selectActive(match_r11); });
    ɵngcc0.ɵɵelementStart(2, "a", 13);
    ɵngcc0.ɵɵlistener("click", function TypeaheadContainerComponent_ng_template_3_ng_template_2_li_1_Template_a_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const match_r11 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.selectMatch(match_r11, $event); });
    ɵngcc0.ɵɵtemplate(3, TypeaheadContainerComponent_ng_template_3_ng_template_2_li_1_ng_template_3_Template, 0, 0, "ng-template", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = ɵngcc0.ɵɵnextContext();
    const match_r11 = ctx_r24.$implicit;
    const i_r12 = ctx_r24.index;
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r14.isActive(match_r11));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r14.itemTemplate || _r1)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(4, _c2, match_r11.item, i_r12, match_r11, ctx_r14.query));
} }
function TypeaheadContainerComponent_ng_template_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TypeaheadContainerComponent_ng_template_3_ng_template_2_li_0_Template, 3, 1, "li", 8);
    ɵngcc0.ɵɵtemplate(1, TypeaheadContainerComponent_ng_template_3_ng_template_2_li_1_Template, 4, 9, "li", 9);
} if (rf & 2) {
    const match_r11 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", match_r11.isHeader());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !match_r11.isHeader());
} }
function TypeaheadContainerComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 5, 6);
    ɵngcc0.ɵɵtemplate(2, TypeaheadContainerComponent_ng_template_3_ng_template_2_Template, 2, 2, "ng-template", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("overflow-y", ctx_r4.needScrollbar ? "scroll" : "auto")("height", ctx_r4.needScrollbar ? ctx_r4.guiHeight : "auto");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.matches);
} }
function TypeaheadContainerComponent_ng_template_5_ng_template_0_h6_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h6", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const match_r26 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(match_r26);
} }
function TypeaheadContainerComponent_ng_template_5_ng_template_0_ng_template_1_ng_template_2_Template(rf, ctx) { }
function TypeaheadContainerComponent_ng_template_5_ng_template_0_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r35 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15, 11);
    ɵngcc0.ɵɵlistener("click", function TypeaheadContainerComponent_ng_template_5_ng_template_0_ng_template_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r35); const match_r26 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33.selectMatch(match_r26, $event); })("mouseenter", function TypeaheadContainerComponent_ng_template_5_ng_template_0_ng_template_1_Template_button_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r35); const match_r26 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r36 = ɵngcc0.ɵɵnextContext(2); return ctx_r36.selectActive(match_r26); });
    ɵngcc0.ɵɵtemplate(2, TypeaheadContainerComponent_ng_template_5_ng_template_0_ng_template_1_ng_template_2_Template, 0, 0, "ng-template", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r38 = ɵngcc0.ɵɵnextContext();
    const match_r26 = ctx_r38.$implicit;
    const i_r27 = ctx_r38.index;
    const ctx_r29 = ɵngcc0.ɵɵnextContext(2);
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r29.isActive(match_r26));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r29.itemTemplate || _r1)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(4, _c2, match_r26.item, i_r27, match_r26, ctx_r29.query));
} }
function TypeaheadContainerComponent_ng_template_5_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TypeaheadContainerComponent_ng_template_5_ng_template_0_h6_0_Template, 2, 1, "h6", 8);
    ɵngcc0.ɵɵtemplate(1, TypeaheadContainerComponent_ng_template_5_ng_template_0_ng_template_1_Template, 3, 9, "ng-template", 14);
} if (rf & 2) {
    const match_r26 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", match_r26.isHeader());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !match_r26.isHeader());
} }
function TypeaheadContainerComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TypeaheadContainerComponent_ng_template_5_ng_template_0_Template, 2, 2, "ng-template", 7);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r6.matches);
} }
const _c3 = function (a0, a1, a2) { return { matches: a0, itemTemplate: a1, query: a2 }; };
const /** @type {?} */ latinMap = {
    'Á': 'A',
    'Ă': 'A',
    'Ắ': 'A',
    'Ặ': 'A',
    'Ằ': 'A',
    'Ẳ': 'A',
    'Ẵ': 'A',
    'Ǎ': 'A',
    'Â': 'A',
    'Ấ': 'A',
    'Ậ': 'A',
    'Ầ': 'A',
    'Ẩ': 'A',
    'Ẫ': 'A',
    'Ä': 'A',
    'Ǟ': 'A',
    'Ȧ': 'A',
    'Ǡ': 'A',
    'Ạ': 'A',
    'Ȁ': 'A',
    'À': 'A',
    'Ả': 'A',
    'Ȃ': 'A',
    'Ā': 'A',
    'Ą': 'A',
    'Å': 'A',
    'Ǻ': 'A',
    'Ḁ': 'A',
    'Ⱥ': 'A',
    'Ã': 'A',
    'Ꜳ': 'AA',
    'Æ': 'AE',
    'Ǽ': 'AE',
    'Ǣ': 'AE',
    'Ꜵ': 'AO',
    'Ꜷ': 'AU',
    'Ꜹ': 'AV',
    'Ꜻ': 'AV',
    'Ꜽ': 'AY',
    'Ḃ': 'B',
    'Ḅ': 'B',
    'Ɓ': 'B',
    'Ḇ': 'B',
    'Ƀ': 'B',
    'Ƃ': 'B',
    'Ć': 'C',
    'Č': 'C',
    'Ç': 'C',
    'Ḉ': 'C',
    'Ĉ': 'C',
    'Ċ': 'C',
    'Ƈ': 'C',
    'Ȼ': 'C',
    'Ď': 'D',
    'Ḑ': 'D',
    'Ḓ': 'D',
    'Ḋ': 'D',
    'Ḍ': 'D',
    'Ɗ': 'D',
    'Ḏ': 'D',
    'ǲ': 'D',
    'ǅ': 'D',
    'Đ': 'D',
    'Ƌ': 'D',
    'Ǳ': 'DZ',
    'Ǆ': 'DZ',
    'É': 'E',
    'Ĕ': 'E',
    'Ě': 'E',
    'Ȩ': 'E',
    'Ḝ': 'E',
    'Ê': 'E',
    'Ế': 'E',
    'Ệ': 'E',
    'Ề': 'E',
    'Ể': 'E',
    'Ễ': 'E',
    'Ḙ': 'E',
    'Ë': 'E',
    'Ė': 'E',
    'Ẹ': 'E',
    'Ȅ': 'E',
    'È': 'E',
    'Ẻ': 'E',
    'Ȇ': 'E',
    'Ē': 'E',
    'Ḗ': 'E',
    'Ḕ': 'E',
    'Ę': 'E',
    'Ɇ': 'E',
    'Ẽ': 'E',
    'Ḛ': 'E',
    'Ꝫ': 'ET',
    'Ḟ': 'F',
    'Ƒ': 'F',
    'Ǵ': 'G',
    'Ğ': 'G',
    'Ǧ': 'G',
    'Ģ': 'G',
    'Ĝ': 'G',
    'Ġ': 'G',
    'Ɠ': 'G',
    'Ḡ': 'G',
    'Ǥ': 'G',
    'Ḫ': 'H',
    'Ȟ': 'H',
    'Ḩ': 'H',
    'Ĥ': 'H',
    'Ⱨ': 'H',
    'Ḧ': 'H',
    'Ḣ': 'H',
    'Ḥ': 'H',
    'Ħ': 'H',
    'Í': 'I',
    'Ĭ': 'I',
    'Ǐ': 'I',
    'Î': 'I',
    'Ï': 'I',
    'Ḯ': 'I',
    'İ': 'I',
    'Ị': 'I',
    'Ȉ': 'I',
    'Ì': 'I',
    'Ỉ': 'I',
    'Ȋ': 'I',
    'Ī': 'I',
    'Į': 'I',
    'Ɨ': 'I',
    'Ĩ': 'I',
    'Ḭ': 'I',
    'Ꝺ': 'D',
    'Ꝼ': 'F',
    'Ᵹ': 'G',
    'Ꞃ': 'R',
    'Ꞅ': 'S',
    'Ꞇ': 'T',
    'Ꝭ': 'IS',
    'Ĵ': 'J',
    'Ɉ': 'J',
    'Ḱ': 'K',
    'Ǩ': 'K',
    'Ķ': 'K',
    'Ⱪ': 'K',
    'Ꝃ': 'K',
    'Ḳ': 'K',
    'Ƙ': 'K',
    'Ḵ': 'K',
    'Ꝁ': 'K',
    'Ꝅ': 'K',
    'Ĺ': 'L',
    'Ƚ': 'L',
    'Ľ': 'L',
    'Ļ': 'L',
    'Ḽ': 'L',
    'Ḷ': 'L',
    'Ḹ': 'L',
    'Ⱡ': 'L',
    'Ꝉ': 'L',
    'Ḻ': 'L',
    'Ŀ': 'L',
    'Ɫ': 'L',
    'ǈ': 'L',
    'Ł': 'L',
    'Ǉ': 'LJ',
    'Ḿ': 'M',
    'Ṁ': 'M',
    'Ṃ': 'M',
    'Ɱ': 'M',
    'Ń': 'N',
    'Ň': 'N',
    'Ņ': 'N',
    'Ṋ': 'N',
    'Ṅ': 'N',
    'Ṇ': 'N',
    'Ǹ': 'N',
    'Ɲ': 'N',
    'Ṉ': 'N',
    'Ƞ': 'N',
    'ǋ': 'N',
    'Ñ': 'N',
    'Ǌ': 'NJ',
    'Ó': 'O',
    'Ŏ': 'O',
    'Ǒ': 'O',
    'Ô': 'O',
    'Ố': 'O',
    'Ộ': 'O',
    'Ồ': 'O',
    'Ổ': 'O',
    'Ỗ': 'O',
    'Ö': 'O',
    'Ȫ': 'O',
    'Ȯ': 'O',
    'Ȱ': 'O',
    'Ọ': 'O',
    'Ő': 'O',
    'Ȍ': 'O',
    'Ò': 'O',
    'Ỏ': 'O',
    'Ơ': 'O',
    'Ớ': 'O',
    'Ợ': 'O',
    'Ờ': 'O',
    'Ở': 'O',
    'Ỡ': 'O',
    'Ȏ': 'O',
    'Ꝋ': 'O',
    'Ꝍ': 'O',
    'Ō': 'O',
    'Ṓ': 'O',
    'Ṑ': 'O',
    'Ɵ': 'O',
    'Ǫ': 'O',
    'Ǭ': 'O',
    'Ø': 'O',
    'Ǿ': 'O',
    'Õ': 'O',
    'Ṍ': 'O',
    'Ṏ': 'O',
    'Ȭ': 'O',
    'Ƣ': 'OI',
    'Ꝏ': 'OO',
    'Ɛ': 'E',
    'Ɔ': 'O',
    'Ȣ': 'OU',
    'Ṕ': 'P',
    'Ṗ': 'P',
    'Ꝓ': 'P',
    'Ƥ': 'P',
    'Ꝕ': 'P',
    'Ᵽ': 'P',
    'Ꝑ': 'P',
    'Ꝙ': 'Q',
    'Ꝗ': 'Q',
    'Ŕ': 'R',
    'Ř': 'R',
    'Ŗ': 'R',
    'Ṙ': 'R',
    'Ṛ': 'R',
    'Ṝ': 'R',
    'Ȑ': 'R',
    'Ȓ': 'R',
    'Ṟ': 'R',
    'Ɍ': 'R',
    'Ɽ': 'R',
    'Ꜿ': 'C',
    'Ǝ': 'E',
    'Ś': 'S',
    'Ṥ': 'S',
    'Š': 'S',
    'Ṧ': 'S',
    'Ş': 'S',
    'Ŝ': 'S',
    'Ș': 'S',
    'Ṡ': 'S',
    'Ṣ': 'S',
    'Ṩ': 'S',
    'Ť': 'T',
    'Ţ': 'T',
    'Ṱ': 'T',
    'Ț': 'T',
    'Ⱦ': 'T',
    'Ṫ': 'T',
    'Ṭ': 'T',
    'Ƭ': 'T',
    'Ṯ': 'T',
    'Ʈ': 'T',
    'Ŧ': 'T',
    'Ɐ': 'A',
    'Ꞁ': 'L',
    'Ɯ': 'M',
    'Ʌ': 'V',
    'Ꜩ': 'TZ',
    'Ú': 'U',
    'Ŭ': 'U',
    'Ǔ': 'U',
    'Û': 'U',
    'Ṷ': 'U',
    'Ü': 'U',
    'Ǘ': 'U',
    'Ǚ': 'U',
    'Ǜ': 'U',
    'Ǖ': 'U',
    'Ṳ': 'U',
    'Ụ': 'U',
    'Ű': 'U',
    'Ȕ': 'U',
    'Ù': 'U',
    'Ủ': 'U',
    'Ư': 'U',
    'Ứ': 'U',
    'Ự': 'U',
    'Ừ': 'U',
    'Ử': 'U',
    'Ữ': 'U',
    'Ȗ': 'U',
    'Ū': 'U',
    'Ṻ': 'U',
    'Ų': 'U',
    'Ů': 'U',
    'Ũ': 'U',
    'Ṹ': 'U',
    'Ṵ': 'U',
    'Ꝟ': 'V',
    'Ṿ': 'V',
    'Ʋ': 'V',
    'Ṽ': 'V',
    'Ꝡ': 'VY',
    'Ẃ': 'W',
    'Ŵ': 'W',
    'Ẅ': 'W',
    'Ẇ': 'W',
    'Ẉ': 'W',
    'Ẁ': 'W',
    'Ⱳ': 'W',
    'Ẍ': 'X',
    'Ẋ': 'X',
    'Ý': 'Y',
    'Ŷ': 'Y',
    'Ÿ': 'Y',
    'Ẏ': 'Y',
    'Ỵ': 'Y',
    'Ỳ': 'Y',
    'Ƴ': 'Y',
    'Ỷ': 'Y',
    'Ỿ': 'Y',
    'Ȳ': 'Y',
    'Ɏ': 'Y',
    'Ỹ': 'Y',
    'Ź': 'Z',
    'Ž': 'Z',
    'Ẑ': 'Z',
    'Ⱬ': 'Z',
    'Ż': 'Z',
    'Ẓ': 'Z',
    'Ȥ': 'Z',
    'Ẕ': 'Z',
    'Ƶ': 'Z',
    'Ĳ': 'IJ',
    'Œ': 'OE',
    'ᴀ': 'A',
    'ᴁ': 'AE',
    'ʙ': 'B',
    'ᴃ': 'B',
    'ᴄ': 'C',
    'ᴅ': 'D',
    'ᴇ': 'E',
    'ꜰ': 'F',
    'ɢ': 'G',
    'ʛ': 'G',
    'ʜ': 'H',
    'ɪ': 'I',
    'ʁ': 'R',
    'ᴊ': 'J',
    'ᴋ': 'K',
    'ʟ': 'L',
    'ᴌ': 'L',
    'ᴍ': 'M',
    'ɴ': 'N',
    'ᴏ': 'O',
    'ɶ': 'OE',
    'ᴐ': 'O',
    'ᴕ': 'OU',
    'ᴘ': 'P',
    'ʀ': 'R',
    'ᴎ': 'N',
    'ᴙ': 'R',
    'ꜱ': 'S',
    'ᴛ': 'T',
    'ⱻ': 'E',
    'ᴚ': 'R',
    'ᴜ': 'U',
    'ᴠ': 'V',
    'ᴡ': 'W',
    'ʏ': 'Y',
    'ᴢ': 'Z',
    'á': 'a',
    'ă': 'a',
    'ắ': 'a',
    'ặ': 'a',
    'ằ': 'a',
    'ẳ': 'a',
    'ẵ': 'a',
    'ǎ': 'a',
    'â': 'a',
    'ấ': 'a',
    'ậ': 'a',
    'ầ': 'a',
    'ẩ': 'a',
    'ẫ': 'a',
    'ä': 'a',
    'ǟ': 'a',
    'ȧ': 'a',
    'ǡ': 'a',
    'ạ': 'a',
    'ȁ': 'a',
    'à': 'a',
    'ả': 'a',
    'ȃ': 'a',
    'ā': 'a',
    'ą': 'a',
    'ᶏ': 'a',
    'ẚ': 'a',
    'å': 'a',
    'ǻ': 'a',
    'ḁ': 'a',
    'ⱥ': 'a',
    'ã': 'a',
    'ꜳ': 'aa',
    'æ': 'ae',
    'ǽ': 'ae',
    'ǣ': 'ae',
    'ꜵ': 'ao',
    'ꜷ': 'au',
    'ꜹ': 'av',
    'ꜻ': 'av',
    'ꜽ': 'ay',
    'ḃ': 'b',
    'ḅ': 'b',
    'ɓ': 'b',
    'ḇ': 'b',
    'ᵬ': 'b',
    'ᶀ': 'b',
    'ƀ': 'b',
    'ƃ': 'b',
    'ɵ': 'o',
    'ć': 'c',
    'č': 'c',
    'ç': 'c',
    'ḉ': 'c',
    'ĉ': 'c',
    'ɕ': 'c',
    'ċ': 'c',
    'ƈ': 'c',
    'ȼ': 'c',
    'ď': 'd',
    'ḑ': 'd',
    'ḓ': 'd',
    'ȡ': 'd',
    'ḋ': 'd',
    'ḍ': 'd',
    'ɗ': 'd',
    'ᶑ': 'd',
    'ḏ': 'd',
    'ᵭ': 'd',
    'ᶁ': 'd',
    'đ': 'd',
    'ɖ': 'd',
    'ƌ': 'd',
    'ı': 'i',
    'ȷ': 'j',
    'ɟ': 'j',
    'ʄ': 'j',
    'ǳ': 'dz',
    'ǆ': 'dz',
    'é': 'e',
    'ĕ': 'e',
    'ě': 'e',
    'ȩ': 'e',
    'ḝ': 'e',
    'ê': 'e',
    'ế': 'e',
    'ệ': 'e',
    'ề': 'e',
    'ể': 'e',
    'ễ': 'e',
    'ḙ': 'e',
    'ë': 'e',
    'ė': 'e',
    'ẹ': 'e',
    'ȅ': 'e',
    'è': 'e',
    'ẻ': 'e',
    'ȇ': 'e',
    'ē': 'e',
    'ḗ': 'e',
    'ḕ': 'e',
    'ⱸ': 'e',
    'ę': 'e',
    'ᶒ': 'e',
    'ɇ': 'e',
    'ẽ': 'e',
    'ḛ': 'e',
    'ꝫ': 'et',
    'ḟ': 'f',
    'ƒ': 'f',
    'ᵮ': 'f',
    'ᶂ': 'f',
    'ǵ': 'g',
    'ğ': 'g',
    'ǧ': 'g',
    'ģ': 'g',
    'ĝ': 'g',
    'ġ': 'g',
    'ɠ': 'g',
    'ḡ': 'g',
    'ᶃ': 'g',
    'ǥ': 'g',
    'ḫ': 'h',
    'ȟ': 'h',
    'ḩ': 'h',
    'ĥ': 'h',
    'ⱨ': 'h',
    'ḧ': 'h',
    'ḣ': 'h',
    'ḥ': 'h',
    'ɦ': 'h',
    'ẖ': 'h',
    'ħ': 'h',
    'ƕ': 'hv',
    'í': 'i',
    'ĭ': 'i',
    'ǐ': 'i',
    'î': 'i',
    'ï': 'i',
    'ḯ': 'i',
    'ị': 'i',
    'ȉ': 'i',
    'ì': 'i',
    'ỉ': 'i',
    'ȋ': 'i',
    'ī': 'i',
    'į': 'i',
    'ᶖ': 'i',
    'ɨ': 'i',
    'ĩ': 'i',
    'ḭ': 'i',
    'ꝺ': 'd',
    'ꝼ': 'f',
    'ᵹ': 'g',
    'ꞃ': 'r',
    'ꞅ': 's',
    'ꞇ': 't',
    'ꝭ': 'is',
    'ǰ': 'j',
    'ĵ': 'j',
    'ʝ': 'j',
    'ɉ': 'j',
    'ḱ': 'k',
    'ǩ': 'k',
    'ķ': 'k',
    'ⱪ': 'k',
    'ꝃ': 'k',
    'ḳ': 'k',
    'ƙ': 'k',
    'ḵ': 'k',
    'ᶄ': 'k',
    'ꝁ': 'k',
    'ꝅ': 'k',
    'ĺ': 'l',
    'ƚ': 'l',
    'ɬ': 'l',
    'ľ': 'l',
    'ļ': 'l',
    'ḽ': 'l',
    'ȴ': 'l',
    'ḷ': 'l',
    'ḹ': 'l',
    'ⱡ': 'l',
    'ꝉ': 'l',
    'ḻ': 'l',
    'ŀ': 'l',
    'ɫ': 'l',
    'ᶅ': 'l',
    'ɭ': 'l',
    'ł': 'l',
    'ǉ': 'lj',
    'ſ': 's',
    'ẜ': 's',
    'ẛ': 's',
    'ẝ': 's',
    'ḿ': 'm',
    'ṁ': 'm',
    'ṃ': 'm',
    'ɱ': 'm',
    'ᵯ': 'm',
    'ᶆ': 'm',
    'ń': 'n',
    'ň': 'n',
    'ņ': 'n',
    'ṋ': 'n',
    'ȵ': 'n',
    'ṅ': 'n',
    'ṇ': 'n',
    'ǹ': 'n',
    'ɲ': 'n',
    'ṉ': 'n',
    'ƞ': 'n',
    'ᵰ': 'n',
    'ᶇ': 'n',
    'ɳ': 'n',
    'ñ': 'n',
    'ǌ': 'nj',
    'ó': 'o',
    'ŏ': 'o',
    'ǒ': 'o',
    'ô': 'o',
    'ố': 'o',
    'ộ': 'o',
    'ồ': 'o',
    'ổ': 'o',
    'ỗ': 'o',
    'ö': 'o',
    'ȫ': 'o',
    'ȯ': 'o',
    'ȱ': 'o',
    'ọ': 'o',
    'ő': 'o',
    'ȍ': 'o',
    'ò': 'o',
    'ỏ': 'o',
    'ơ': 'o',
    'ớ': 'o',
    'ợ': 'o',
    'ờ': 'o',
    'ở': 'o',
    'ỡ': 'o',
    'ȏ': 'o',
    'ꝋ': 'o',
    'ꝍ': 'o',
    'ⱺ': 'o',
    'ō': 'o',
    'ṓ': 'o',
    'ṑ': 'o',
    'ǫ': 'o',
    'ǭ': 'o',
    'ø': 'o',
    'ǿ': 'o',
    'õ': 'o',
    'ṍ': 'o',
    'ṏ': 'o',
    'ȭ': 'o',
    'ƣ': 'oi',
    'ꝏ': 'oo',
    'ɛ': 'e',
    'ᶓ': 'e',
    'ɔ': 'o',
    'ᶗ': 'o',
    'ȣ': 'ou',
    'ṕ': 'p',
    'ṗ': 'p',
    'ꝓ': 'p',
    'ƥ': 'p',
    'ᵱ': 'p',
    'ᶈ': 'p',
    'ꝕ': 'p',
    'ᵽ': 'p',
    'ꝑ': 'p',
    'ꝙ': 'q',
    'ʠ': 'q',
    'ɋ': 'q',
    'ꝗ': 'q',
    'ŕ': 'r',
    'ř': 'r',
    'ŗ': 'r',
    'ṙ': 'r',
    'ṛ': 'r',
    'ṝ': 'r',
    'ȑ': 'r',
    'ɾ': 'r',
    'ᵳ': 'r',
    'ȓ': 'r',
    'ṟ': 'r',
    'ɼ': 'r',
    'ᵲ': 'r',
    'ᶉ': 'r',
    'ɍ': 'r',
    'ɽ': 'r',
    'ↄ': 'c',
    'ꜿ': 'c',
    'ɘ': 'e',
    'ɿ': 'r',
    'ś': 's',
    'ṥ': 's',
    'š': 's',
    'ṧ': 's',
    'ş': 's',
    'ŝ': 's',
    'ș': 's',
    'ṡ': 's',
    'ṣ': 's',
    'ṩ': 's',
    'ʂ': 's',
    'ᵴ': 's',
    'ᶊ': 's',
    'ȿ': 's',
    'ɡ': 'g',
    'ᴑ': 'o',
    'ᴓ': 'o',
    'ᴝ': 'u',
    'ť': 't',
    'ţ': 't',
    'ṱ': 't',
    'ț': 't',
    'ȶ': 't',
    'ẗ': 't',
    'ⱦ': 't',
    'ṫ': 't',
    'ṭ': 't',
    'ƭ': 't',
    'ṯ': 't',
    'ᵵ': 't',
    'ƫ': 't',
    'ʈ': 't',
    'ŧ': 't',
    'ᵺ': 'th',
    'ɐ': 'a',
    'ᴂ': 'ae',
    'ǝ': 'e',
    'ᵷ': 'g',
    'ɥ': 'h',
    'ʮ': 'h',
    'ʯ': 'h',
    'ᴉ': 'i',
    'ʞ': 'k',
    'ꞁ': 'l',
    'ɯ': 'm',
    'ɰ': 'm',
    'ᴔ': 'oe',
    'ɹ': 'r',
    'ɻ': 'r',
    'ɺ': 'r',
    'ⱹ': 'r',
    'ʇ': 't',
    'ʌ': 'v',
    'ʍ': 'w',
    'ʎ': 'y',
    'ꜩ': 'tz',
    'ú': 'u',
    'ŭ': 'u',
    'ǔ': 'u',
    'û': 'u',
    'ṷ': 'u',
    'ü': 'u',
    'ǘ': 'u',
    'ǚ': 'u',
    'ǜ': 'u',
    'ǖ': 'u',
    'ṳ': 'u',
    'ụ': 'u',
    'ű': 'u',
    'ȕ': 'u',
    'ù': 'u',
    'ủ': 'u',
    'ư': 'u',
    'ứ': 'u',
    'ự': 'u',
    'ừ': 'u',
    'ử': 'u',
    'ữ': 'u',
    'ȗ': 'u',
    'ū': 'u',
    'ṻ': 'u',
    'ų': 'u',
    'ᶙ': 'u',
    'ů': 'u',
    'ũ': 'u',
    'ṹ': 'u',
    'ṵ': 'u',
    'ᵫ': 'ue',
    'ꝸ': 'um',
    'ⱴ': 'v',
    'ꝟ': 'v',
    'ṿ': 'v',
    'ʋ': 'v',
    'ᶌ': 'v',
    'ⱱ': 'v',
    'ṽ': 'v',
    'ꝡ': 'vy',
    'ẃ': 'w',
    'ŵ': 'w',
    'ẅ': 'w',
    'ẇ': 'w',
    'ẉ': 'w',
    'ẁ': 'w',
    'ⱳ': 'w',
    'ẘ': 'w',
    'ẍ': 'x',
    'ẋ': 'x',
    'ᶍ': 'x',
    'ý': 'y',
    'ŷ': 'y',
    'ÿ': 'y',
    'ẏ': 'y',
    'ỵ': 'y',
    'ỳ': 'y',
    'ƴ': 'y',
    'ỷ': 'y',
    'ỿ': 'y',
    'ȳ': 'y',
    'ẙ': 'y',
    'ɏ': 'y',
    'ỹ': 'y',
    'ź': 'z',
    'ž': 'z',
    'ẑ': 'z',
    'ʑ': 'z',
    'ⱬ': 'z',
    'ż': 'z',
    'ẓ': 'z',
    'ȥ': 'z',
    'ẕ': 'z',
    'ᵶ': 'z',
    'ᶎ': 'z',
    'ʐ': 'z',
    'ƶ': 'z',
    'ɀ': 'z',
    'ﬀ': 'ff',
    'ﬃ': 'ffi',
    'ﬄ': 'ffl',
    'ﬁ': 'fi',
    'ﬂ': 'fl',
    'ĳ': 'ij',
    'œ': 'oe',
    'ﬆ': 'st',
    'ₐ': 'a',
    'ₑ': 'e',
    'ᵢ': 'i',
    'ⱼ': 'j',
    'ₒ': 'o',
    'ᵣ': 'r',
    'ᵤ': 'u',
    'ᵥ': 'v',
    'ₓ': 'x'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TypeaheadOptions {
    /**
     * @param {?} options
     */
    constructor(options) {
        Object.assign(this, options);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TypeaheadMatch {
    /**
     * @param {?} item
     * @param {?=} value
     * @param {?=} header
     */
    constructor(item, value = item, header = false) {
        this.item = item;
        this.value = value;
        this.header = header;
    }
    /**
     * @return {?}
     */
    isHeader() {
        return this.header;
    }
    /**
     * @return {?}
     */
    toString() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} str
 * @return {?}
 */
function latinize(str) {
    if (!str) {
        return '';
    }
    return str.replace(/[^A-Za-z0-9\[\] ]/g, function (a) {
        return latinMap[a] || a;
    });
}
/**
 * @param {?} queryToEscape
 * @return {?}
 */
function escapeRegexp(queryToEscape) {
    // Regex: capture the whole query string and replace it with the string
    // that will be used to match the results, for example if the capture is
    // 'a' the result will be \a
    return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
}
/**
 * @param {?} str
 * @param {?=} wordRegexDelimiters
 * @param {?=} phraseRegexDelimiters
 * @return {?}
 */
function tokenize(str, wordRegexDelimiters = ' ', phraseRegexDelimiters = '') {
    /* tslint:enable */
    const /** @type {?} */ regexStr = `(?:[${phraseRegexDelimiters}])([^${phraseRegexDelimiters}]+)` +
        `(?:[${phraseRegexDelimiters}])|([^${wordRegexDelimiters}]+)`;
    const /** @type {?} */ preTokenized = str.split(new RegExp(regexStr, 'g'));
    const /** @type {?} */ result = [];
    const /** @type {?} */ preTokenizedLength = preTokenized.length;
    let /** @type {?} */ token;
    const /** @type {?} */ replacePhraseDelimiters = new RegExp(`[${phraseRegexDelimiters}]+`, 'g');
    for (let /** @type {?} */ i = 0; i < preTokenizedLength; i += 1) {
        token = preTokenized[i];
        if (token && token.length && token !== wordRegexDelimiters) {
            result.push(token.replace(replacePhraseDelimiters, ''));
        }
    }
    return result;
}
/**
 * @param {?} object
 * @param {?} option
 * @return {?}
 */
function getValueFromObject(object, option) {
    if (!option || typeof object !== 'object') {
        return object.toString();
    }
    if (option.endsWith('()')) {
        const /** @type {?} */ functionName = option.slice(0, option.length - 2);
        return object[functionName]().toString();
    }
    const /** @type {?} */ properties = option
        .replace(/\[(\w+)\]/g, '.$1')
        .replace(/^\./, '');
    const /** @type {?} */ propertiesArray = properties.split('.');
    for (const /** @type {?} */ property of propertiesArray) {
        if (property in object) {
            // tslint:disable-next-line
            object = object[property];
        }
    }
    if (!object) {
        return '';
    }
    return object.toString();
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TypeaheadContainerComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.renderer = renderer;
        this.isFocused = false;
        this._matches = [];
        this.isScrolledIntoView = function (elem) {
            const /** @type {?} */ containerViewTop = this.ulElement.nativeElement.scrollTop;
            const /** @type {?} */ containerViewBottom = containerViewTop + Number(this.ulElement.nativeElement.offsetHeight);
            const /** @type {?} */ elemTop = elem.offsetTop;
            const /** @type {?} */ elemBottom = elemTop + elem.offsetHeight;
            return ((elemBottom <= containerViewBottom) && (elemTop >= containerViewTop));
        };
        this.element = element;
    }
    /**
     * @return {?}
     */
    get isBs4() {
        return !isBs3();
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @return {?}
     */
    get matches() {
        return this._matches;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set matches(value) {
        this._matches = value;
        this.needScrollbar = this.typeaheadScrollable && this.typeaheadOptionsInScrollableView < this.matches.length;
        if (this.typeaheadScrollable) {
            setTimeout(() => {
                this.setScrollableMode();
            });
        }
        if (this._matches.length > 0) {
            this._active = this._matches[0];
            if (this._active.isHeader()) {
                this.nextActiveMatch();
            }
        }
    }
    /**
     * @return {?}
     */
    get optionsListTemplate() {
        return this.parent ? this.parent.optionsListTemplate : undefined;
    }
    /**
     * @return {?}
     */
    get typeaheadScrollable() {
        return this.parent ? this.parent.typeaheadScrollable : false;
    }
    /**
     * @return {?}
     */
    get typeaheadOptionsInScrollableView() {
        return this.parent ? this.parent.typeaheadOptionsInScrollableView : 5;
    }
    /**
     * @return {?}
     */
    get itemTemplate() {
        return this.parent ? this.parent.typeaheadItemTemplate : undefined;
    }
    /**
     * @param {?=} isActiveItemChanged
     * @return {?}
     */
    selectActiveMatch(isActiveItemChanged) {
        if (this._active && this.parent.typeaheadSelectFirstItem) {
            this.selectMatch(this._active);
        }
        if (!this.parent.typeaheadSelectFirstItem && isActiveItemChanged) {
            this.selectMatch(this._active);
        }
    }
    /**
     * @return {?}
     */
    prevActiveMatch() {
        const /** @type {?} */ index = this.matches.indexOf(this._active);
        this._active = this.matches[index - 1 < 0 ? this.matches.length - 1 : index - 1];
        if (this._active.isHeader()) {
            this.prevActiveMatch();
        }
        if (this.typeaheadScrollable) {
            this.scrollPrevious(index);
        }
    }
    /**
     * @return {?}
     */
    nextActiveMatch() {
        const /** @type {?} */ index = this.matches.indexOf(this._active);
        this._active = this.matches[index + 1 > this.matches.length - 1 ? 0 : index + 1];
        if (this._active.isHeader()) {
            this.nextActiveMatch();
        }
        if (this.typeaheadScrollable) {
            this.scrollNext(index);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    selectActive(value) {
        this.isFocused = true;
        this._active = value;
    }
    /**
     * @param {?} match
     * @param {?} query
     * @return {?}
     */
    highlight(match, query) {
        let /** @type {?} */ itemStr = match.value;
        let /** @type {?} */ itemStrHelper = (this.parent && this.parent.typeaheadLatinize
            ? latinize(itemStr)
            : itemStr).toLowerCase();
        let /** @type {?} */ startIdx;
        let /** @type {?} */ tokenLen;
        // Replaces the capture string with the same string inside of a "strong" tag
        if (typeof query === 'object') {
            const /** @type {?} */ queryLen = query.length;
            for (let /** @type {?} */ i = 0; i < queryLen; i += 1) {
                // query[i] is already latinized and lower case
                startIdx = itemStrHelper.indexOf(query[i]);
                tokenLen = query[i].length;
                if (startIdx >= 0 && tokenLen > 0) {
                    itemStr =
                        `${itemStr.substring(0, startIdx)}<strong>${itemStr.substring(startIdx, startIdx + tokenLen)}</strong>` +
                            `${itemStr.substring(startIdx + tokenLen)}`;
                    itemStrHelper =
                        `${itemStrHelper.substring(0, startIdx)}        ${' '.repeat(tokenLen)}         ` +
                            `${itemStrHelper.substring(startIdx + tokenLen)}`;
                }
            }
        }
        else if (query) {
            // query is already latinized and lower case
            startIdx = itemStrHelper.indexOf(query);
            tokenLen = query.length;
            if (startIdx >= 0 && tokenLen > 0) {
                itemStr =
                    `${itemStr.substring(0, startIdx)}<strong>${itemStr.substring(startIdx, startIdx + tokenLen)}</strong>` +
                        `${itemStr.substring(startIdx + tokenLen)}`;
            }
        }
        return itemStr;
    }
    /**
     * @return {?}
     */
    focusLost() {
        this.isFocused = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isActive(value) {
        return this._active === value;
    }
    /**
     * @param {?} value
     * @param {?=} e
     * @return {?}
     */
    selectMatch(value, e = void 0) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.parent.changeModel(value);
        setTimeout(() => this.parent.typeaheadOnSelect.emit(value), 0);
        return false;
    }
    /**
     * @return {?}
     */
    setScrollableMode() {
        if (!this.ulElement) {
            this.ulElement = this.element;
        }
        if (this.liElements.first) {
            const /** @type {?} */ ulStyles = Utils.getStyles(this.ulElement.nativeElement);
            const /** @type {?} */ liStyles = Utils.getStyles(this.liElements.first.nativeElement);
            const /** @type {?} */ ulPaddingBottom = parseFloat((ulStyles['padding-bottom'] ? ulStyles['padding-bottom'] : '')
                .replace('px', ''));
            const /** @type {?} */ ulPaddingTop = parseFloat((ulStyles['padding-top'] ? ulStyles['padding-top'] : '0')
                .replace('px', ''));
            const /** @type {?} */ optionHeight = parseFloat((liStyles.height ? liStyles.height : '0')
                .replace('px', ''));
            const /** @type {?} */ height = this.typeaheadOptionsInScrollableView * optionHeight;
            this.guiHeight = `${height + ulPaddingTop + ulPaddingBottom}px`;
        }
        this.renderer.setStyle(this.element.nativeElement, 'visibility', 'visible');
    }
    /**
     * @param {?} index
     * @return {?}
     */
    scrollPrevious(index) {
        if (index === 0) {
            this.scrollToBottom();
            return;
        }
        if (this.liElements) {
            const /** @type {?} */ liElement = this.liElements.toArray()[index - 1];
            if (liElement && !this.isScrolledIntoView(liElement.nativeElement)) {
                this.ulElement.nativeElement.scrollTop = liElement.nativeElement.offsetTop;
            }
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    scrollNext(index) {
        if (index + 1 > this.matches.length - 1) {
            this.scrollToTop();
            return;
        }
        if (this.liElements) {
            const /** @type {?} */ liElement = this.liElements.toArray()[index + 1];
            if (liElement && !this.isScrolledIntoView(liElement.nativeElement)) {
                this.ulElement.nativeElement.scrollTop =
                    liElement.nativeElement.offsetTop -
                        Number(this.ulElement.nativeElement.offsetHeight) +
                        Number(liElement.nativeElement.offsetHeight);
            }
        }
    }
    /**
     * @return {?}
     */
    scrollToBottom() {
        this.ulElement.nativeElement.scrollTop = this.ulElement.nativeElement.scrollHeight;
    }
    /**
     * @return {?}
     */
    scrollToTop() {
        this.ulElement.nativeElement.scrollTop = 0;
    }
}
TypeaheadContainerComponent.ɵfac = function TypeaheadContainerComponent_Factory(t) { return new (t || TypeaheadContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
TypeaheadContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TypeaheadContainerComponent, selectors: [["typeahead-container"]], viewQuery: function TypeaheadContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ulElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.liElements = _t);
    } }, hostAttrs: [1, "dropdown", "open", 2, "position", "absolute", "display", "block"], hostVars: 10, hostBindings: function TypeaheadContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseleave", function TypeaheadContainerComponent_mouseleave_HostBindingHandler() { return ctx.focusLost(); })("blur", function TypeaheadContainerComponent_blur_HostBindingHandler() { return ctx.focusLost(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("overflow-y", ctx.isBs4 && ctx.needScrollbar ? "scroll" : "visible")("height", ctx.isBs4 && ctx.needScrollbar ? ctx.guiHeight : "auto")("visibility", ctx.typeaheadScrollable ? "hidden" : "visible");
        ɵngcc0.ɵɵclassProp("dropdown-menu", ctx.isBs4)("dropup", ctx.dropup);
    } }, decls: 7, vars: 6, consts: [[3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["bsItemTemplate", ""], ["bs3Template", ""], ["bs4Template", ""], [3, "innerHtml"], [1, "dropdown-menu"], ["ulElement", ""], ["ngFor", "", 3, "ngForOf"], ["class", "dropdown-header", 4, "ngIf"], [3, "active", "mouseenter", 4, "ngIf"], [1, "dropdown-header"], ["liElements", ""], [3, "mouseenter"], ["href", "#", "tabindex", "-1", 3, "click"], [3, "ngIf"], [1, "dropdown-item", 3, "click", "mouseenter"]], template: function TypeaheadContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TypeaheadContainerComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
        ɵngcc0.ɵɵtemplate(1, TypeaheadContainerComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(3, TypeaheadContainerComponent_ng_template_3_Template, 3, 5, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(5, TypeaheadContainerComponent_ng_template_5_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(4);
        const _r5 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.optionsListTemplate || (ctx.isBs4 ? _r5 : _r3))("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c3, ctx.matches, ctx.itemTemplate, ctx.query));
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, ɵngcc1.NgIf], styles: [".dropdown[_nghost-%COMP%] {\n      z-index: 1000;\n    }"] });
/** @nocollapse */
TypeaheadContainerComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
TypeaheadContainerComponent.propDecorators = {
    "ulElement": [{ type: ViewChild, args: ['ulElement',] },],
    "liElements": [{ type: ViewChildren, args: ['liElements',] },],
    "focusLost": [{ type: HostListener, args: ['mouseleave',] }, { type: HostListener, args: ['blur',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadContainerComponent, [{
        type: Component,
        args: [{
                selector: 'typeahead-container',
                // tslint:disable-next-line
                template: "<!-- inject options list template -->\n<ng-template [ngTemplateOutlet]=\"optionsListTemplate || (isBs4 ? bs4Template : bs3Template)\"\n             [ngTemplateOutletContext]=\"{matches:matches, itemTemplate:itemTemplate, query:query}\"></ng-template>\n\n<!-- default options item template -->\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\"><span [innerHtml]=\"highlight(match, query)\"></span>\n</ng-template>\n\n<!-- Bootstrap 3 options list template -->\n<ng-template #bs3Template>\n  <ul class=\"dropdown-menu\"\n      #ulElement\n      [style.overflow-y]=\"needScrollbar ? 'scroll': 'auto'\"\n      [style.height]=\"needScrollbar ? guiHeight: 'auto'\">\n    <ng-template ngFor let-match let-i=\"index\" [ngForOf]=\"matches\">\n      <li #liElements *ngIf=\"match.isHeader()\" class=\"dropdown-header\">{{ match }}</li>\n      <li #liElements *ngIf=\"!match.isHeader()\" [class.active]=\"isActive(match)\" (mouseenter)=\"selectActive(match)\">\n        <a href=\"#\" (click)=\"selectMatch(match, $event)\" tabindex=\"-1\">\n          <ng-template [ngTemplateOutlet]=\"itemTemplate || bsItemTemplate\"\n                       [ngTemplateOutletContext]=\"{item:match.item, index:i, match:match, query:query}\"></ng-template>\n        </a>\n      </li>\n    </ng-template>\n  </ul>\n</ng-template>\n\n<!-- Bootstrap 4 options list template -->\n<ng-template #bs4Template>\n  <ng-template ngFor let-match let-i=\"index\" [ngForOf]=\"matches\">\n    <h6 *ngIf=\"match.isHeader()\" class=\"dropdown-header\">{{ match }}</h6>\n    <ng-template [ngIf]=\"!match.isHeader()\">\n      <button #liElements\n              class=\"dropdown-item\"\n              (click)=\"selectMatch(match, $event)\"\n              (mouseenter)=\"selectActive(match)\"\n              [class.active]=\"isActive(match)\">\n        <ng-template [ngTemplateOutlet]=\"itemTemplate || bsItemTemplate\"\n                     [ngTemplateOutletContext]=\"{item:match.item, index:i, match:match, query:query}\"></ng-template>\n      </button>\n    </ng-template>\n  </ng-template>\n</ng-template>\n",
                host: {
                    class: 'dropdown open',
                    '[class.dropdown-menu]': 'isBs4',
                    '[style.overflow-y]': `isBs4 && needScrollbar ? 'scroll': 'visible'`,
                    '[style.height]': `isBs4 && needScrollbar ? guiHeight: 'auto'`,
                    '[style.visibility]': `typeaheadScrollable ? 'hidden' : 'visible'`,
                    '[class.dropup]': 'dropup',
                    style: 'position: absolute;display: block;'
                },
                styles: [`
    :host.dropdown {
      z-index: 1000;
    }
  `]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { focusLost: [{
            type: HostListener,
            args: ['mouseleave']
        }, {
            type: HostListener,
            args: ['blur']
        }], ulElement: [{
            type: ViewChild,
            args: ['ulElement']
        }], liElements: [{
            type: ViewChildren,
            args: ['liElements']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Default values provider for typeahead
 */
class TypeaheadConfig {
    constructor() {
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
}
TypeaheadConfig.ɵfac = function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); };
TypeaheadConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TypeaheadConfig, factory: TypeaheadConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TypeaheadDirective {
    /**
     * @param {?} ngControl
     * @param {?} element
     * @param {?} viewContainerRef
     * @param {?} renderer
     * @param {?} config
     * @param {?} cis
     * @param {?} changeDetection
     */
    constructor(ngControl, element, viewContainerRef, renderer, config, cis, changeDetection) {
        this.ngControl = ngControl;
        this.element = element;
        this.renderer = renderer;
        this.changeDetection = changeDetection;
        /**
         * minimal no of characters that needs to be entered before
         * typeahead kicks-in. When set to 0, typeahead shows on focus with full
         * list of options (limited as normal by typeaheadOptionsLimit)
         */
        this.typeaheadMinLength = void 0;
        /**
         * should be used only in case of typeahead attribute is array.
         * If true - loading of options will be async, otherwise - sync.
         * true make sense if options array is large.
         */
        this.typeaheadAsync = void 0;
        /**
         * match latin symbols.
         * If true the word súper would match super and vice versa.
         */
        this.typeaheadLatinize = true;
        /**
         * Can be use to search words by inserting a single white space between each characters
         *  for example 'C a l i f o r n i a' will match 'California'.
         */
        this.typeaheadSingleWords = true;
        /**
         * should be used only in case typeaheadSingleWords attribute is true.
         * Sets the word delimiter to break words. Defaults to space.
         */
        this.typeaheadWordDelimiters = ' ';
        /**
         * should be used only in case typeaheadSingleWords attribute is true.
         * Sets the word delimiter to match exact phrase.
         * Defaults to simple and double quotes.
         */
        this.typeaheadPhraseDelimiters = '\'"';
        /**
         * specifies if typeahead is scrollable
         */
        this.typeaheadScrollable = false;
        /**
         * specifies number of options to show in scroll view
         */
        this.typeaheadOptionsInScrollableView = 5;
        /**
         * fired when an options list was opened and the user clicked Tab
         * If a value equal true, it will be chosen first or active item in the list
         * If value equal false, it will be chosen an active item in the list or nothing
         */
        this.typeaheadSelectFirstItem = true;
        /**
         * fired when 'busy' state of this component was changed,
         * fired on async mode only, returns boolean
         */
        this.typeaheadLoading = new EventEmitter();
        /**
         * fired on every key event and returns true
         * in case of matches are not detected
         */
        this.typeaheadNoResults = new EventEmitter();
        /**
         * fired when option was selected, return object with data of this option
         */
        this.typeaheadOnSelect = new EventEmitter();
        /**
         * fired when blur event occurs. returns the active item
         */
        this.typeaheadOnBlur = new EventEmitter();
        /**
         * This attribute indicates that the dropdown should be opened upwards
         */
        this.dropup = false;
        this.isActiveItemChanged = false;
        this.isTypeaheadOptionsListActive = false;
        // tslint:disable-next-line:no-any
        this.keyUpEventEmitter = new EventEmitter();
        this.placement = 'bottom-left';
        this._subscriptions = [];
        this._typeahead = cis.createLoader(element, viewContainerRef, renderer)
            .provide({ provide: TypeaheadConfig, useValue: config });
        Object.assign(this, { typeaheadHideResultsOnBlur: config.hideResultsOnBlur,
            typeaheadSelectFirstItem: config.selectFirstItem,
            typeaheadMinLength: config.minLength
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.typeaheadOptionsLimit = this.typeaheadOptionsLimit || 20;
        this.typeaheadMinLength =
            this.typeaheadMinLength === void 0 ? 1 : this.typeaheadMinLength;
        this.typeaheadWaitMs = this.typeaheadWaitMs || 0;
        // async should be false in case of array
        if (this.typeaheadAsync === undefined &&
            !(isObservable(this.typeahead))) {
            this.typeaheadAsync = false;
        }
        if (isObservable(this.typeahead)) {
            this.typeaheadAsync = true;
        }
        if (this.typeaheadAsync) {
            this.asyncActions();
        }
        else {
            this.syncActions();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    // tslint:disable-next-line:no-any
    onInput(e) {
        // For `<input>`s, use the `value` property. For others that don't have a
        // `value` (such as `<span contenteditable="true">`), use either
        // `textContent` or `innerText` (depending on which one is supported, i.e.
        // Firefox or IE).
        const /** @type {?} */ value = e.target.value !== undefined
            ? e.target.value
            : e.target.textContent !== undefined
                ? e.target.textContent
                : e.target.innerText;
        if (value != null && value.trim().length >= this.typeaheadMinLength) {
            this.typeaheadLoading.emit(true);
            this.keyUpEventEmitter.emit(e.target.value);
        }
        else {
            this.typeaheadLoading.emit(false);
            this.typeaheadNoResults.emit(false);
            this.hide();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        if (this._container) {
            // esc
            /* tslint:disable-next-line: deprecation */
            if (event.keyCode === 27 || event.key === 'Escape') {
                this.hide();
                return;
            }
            // up
            /* tslint:disable-next-line: deprecation */
            if (event.keyCode === 38 || event.key === 'ArrowUp') {
                this.isActiveItemChanged = true;
                this._container.prevActiveMatch();
                return;
            }
            // down
            /* tslint:disable-next-line: deprecation */
            if (event.keyCode === 40 || event.key === 'ArrowDown') {
                this.isActiveItemChanged = true;
                this._container.nextActiveMatch();
                return;
            }
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (this.typeaheadMinLength === 0) {
            this.typeaheadLoading.emit(true);
            this.keyUpEventEmitter.emit(this.element.nativeElement.value || '');
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this._container && !this._container.isFocused) {
            this.typeaheadOnBlur.emit(this._container.active);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        // no container - no problems
        if (!this._container) {
            return;
        }
        /* tslint:disable-next-line: deprecation */
        if (event.keyCode === 9 || event.key === 'Tab' || event.keyCode === 13 || event.key === 'Enter') {
            event.preventDefault();
            if (this.typeaheadSelectFirstItem) {
                this._container.selectActiveMatch();
                return;
            }
            if (!this.typeaheadSelectFirstItem) {
                this._container.selectActiveMatch(this.isActiveItemChanged);
                this.isActiveItemChanged = false;
                this.hide();
            }
        }
    }
    /**
     * @param {?} match
     * @return {?}
     */
    changeModel(match) {
        const /** @type {?} */ valueStr = match.value;
        this.ngControl.viewToModelUpdate(valueStr);
        (this.ngControl.control).setValue(valueStr);
        this.changeDetection.markForCheck();
        this.hide();
    }
    /**
     * @return {?}
     */
    get matches() {
        return this._matches;
    }
    /**
     * @return {?}
     */
    show() {
        this._typeahead
            .attach(TypeaheadContainerComponent)
            .to(this.container)
            .position({ attachment: `${this.dropup ? 'top' : 'bottom'} left` })
            .show({
            typeaheadRef: this,
            placement: this.placement,
            animation: false,
            dropup: this.dropup
        });
        this._outsideClickListener = this.renderer.listen('document', 'click', (e) => {
            if (this.typeaheadMinLength === 0 && this.element.nativeElement.contains(e.target)) {
                return undefined;
            }
            if (!this.typeaheadHideResultsOnBlur || this.element.nativeElement.contains(e.target)) {
                return undefined;
            }
            this.onOutsideClick();
        });
        this._container = this._typeahead.instance;
        this._container.parent = this;
        // This improves the speed as it won't have to be done for each list item
        const /** @type {?} */ normalizedQuery = (this.typeaheadLatinize
            ? latinize(this.ngControl.control.value)
            : this.ngControl.control.value)
            .toString()
            .toLowerCase();
        this._container.query = this.typeaheadSingleWords
            ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)
            : normalizedQuery;
        this._container.matches = this._matches;
        this.element.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    hide() {
        if (this._typeahead.isShown) {
            this._typeahead.hide();
            this._outsideClickListener();
            this._container = null;
        }
    }
    /**
     * @return {?}
     */
    onOutsideClick() {
        if (this._container && !this._container.isFocused) {
            this.hide();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // clean up subscriptions
        for (const /** @type {?} */ sub of this._subscriptions) {
            sub.unsubscribe();
        }
        this._typeahead.dispose();
    }
    /**
     * @return {?}
     */
    asyncActions() {
        this._subscriptions.push(this.keyUpEventEmitter
            .pipe(debounceTime(this.typeaheadWaitMs), switchMap(() => this.typeahead))
            .subscribe((matches) => {
            this.finalizeAsyncCall(matches);
        }));
    }
    /**
     * @return {?}
     */
    syncActions() {
        this._subscriptions.push(this.keyUpEventEmitter
            .pipe(debounceTime(this.typeaheadWaitMs), mergeMap((value) => {
            const /** @type {?} */ normalizedQuery = this.normalizeQuery(value);
            return from(this.typeahead)
                .pipe(filter((option) => {
                return (option &&
                    this.testMatch(this.normalizeOption(option), normalizedQuery));
            }), toArray());
        }))
            .subscribe((matches) => {
            this.finalizeAsyncCall(matches);
        }));
    }
    /**
     * @param {?} option
     * @return {?}
     */
    normalizeOption(option) {
        const /** @type {?} */ optionValue = getValueFromObject(option, this.typeaheadOptionField);
        const /** @type {?} */ normalizedOption = this.typeaheadLatinize
            ? latinize(optionValue)
            : optionValue;
        return normalizedOption.toLowerCase();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    normalizeQuery(value) {
        // If singleWords, break model here to not be doing extra work on each
        // iteration
        let /** @type {?} */ normalizedQuery = (this.typeaheadLatinize
            ? latinize(value)
            : value)
            .toString()
            .toLowerCase();
        normalizedQuery = this.typeaheadSingleWords
            ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)
            : normalizedQuery;
        return normalizedQuery;
    }
    /**
     * @param {?} match
     * @param {?} test
     * @return {?}
     */
    testMatch(match, test) {
        let /** @type {?} */ spaceLength;
        if (typeof test === 'object') {
            spaceLength = test.length;
            for (let /** @type {?} */ i = 0; i < spaceLength; i += 1) {
                if (test[i].length > 0 && match.indexOf(test[i]) < 0) {
                    return false;
                }
            }
            return true;
        }
        return match.indexOf(test) >= 0;
    }
    /**
     * @param {?} matches
     * @return {?}
     */
    finalizeAsyncCall(matches) {
        this.prepareMatches(matches || []);
        this.typeaheadLoading.emit(false);
        this.typeaheadNoResults.emit(!this.hasMatches());
        if (!this.hasMatches()) {
            this.hide();
            return;
        }
        if (this._container) {
            // fix: remove usage of ngControl internals
            const /** @type {?} */ _controlValue = (this.typeaheadLatinize
                ? latinize(this.ngControl.control.value)
                : this.ngControl.control.value) || '';
            // This improves the speed as it won't have to be done for each list item
            const /** @type {?} */ normalizedQuery = _controlValue.toString().toLowerCase();
            this._container.query = this.typeaheadSingleWords
                ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)
                : normalizedQuery;
            this._container.matches = this._matches;
        }
        else {
            this.show();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    prepareMatches(options) {
        const /** @type {?} */ limited = options.slice(0, this.typeaheadOptionsLimit);
        if (this.typeaheadGroupField) {
            let /** @type {?} */ matches = [];
            // extract all group names
            const /** @type {?} */ groups = limited
                .map((option) => getValueFromObject(option, this.typeaheadGroupField))
                .filter((v, i, a) => a.indexOf(v) === i);
            groups.forEach((group) => {
                // add group header to array of matches
                matches.push(new TypeaheadMatch(group, group, true));
                // add each item of group to array of matches
                matches = matches.concat(limited
                    .filter(
                // tslint:disable-next-line:no-any
                (option) => getValueFromObject(option, this.typeaheadGroupField) === group)
                    .map(
                // tslint:disable-next-line:no-any
                (option) => new TypeaheadMatch(option, getValueFromObject(option, this.typeaheadOptionField))));
            });
            this._matches = matches;
        }
        else {
            this._matches = limited.map(
            // tslint:disable-next-line:no-any
            (option) => new TypeaheadMatch(option, getValueFromObject(option, this.typeaheadOptionField)));
        }
    }
    /**
     * @return {?}
     */
    hasMatches() {
        return this._matches.length > 0;
    }
}
TypeaheadDirective.ɵfac = function TypeaheadDirective_Factory(t) { return new (t || TypeaheadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TypeaheadConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ComponentLoaderFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
TypeaheadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TypeaheadDirective, selectors: [["", "typeahead", ""]], hostBindings: function TypeaheadDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function TypeaheadDirective_input_HostBindingHandler($event) { return ctx.onInput($event); })("keyup", function TypeaheadDirective_keyup_HostBindingHandler($event) { return ctx.onChange($event); })("click", function TypeaheadDirective_click_HostBindingHandler() { return ctx.onFocus(); })("focus", function TypeaheadDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("blur", function TypeaheadDirective_blur_HostBindingHandler() { return ctx.onBlur(); })("keydown", function TypeaheadDirective_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
    } }, inputs: { typeaheadMinLength: "typeaheadMinLength", typeaheadAsync: "typeaheadAsync", typeaheadLatinize: "typeaheadLatinize", typeaheadSingleWords: "typeaheadSingleWords", typeaheadWordDelimiters: "typeaheadWordDelimiters", typeaheadPhraseDelimiters: "typeaheadPhraseDelimiters", typeaheadScrollable: "typeaheadScrollable", typeaheadOptionsInScrollableView: "typeaheadOptionsInScrollableView", typeaheadSelectFirstItem: "typeaheadSelectFirstItem", dropup: "dropup", typeaheadOptionsLimit: "typeaheadOptionsLimit", typeaheadWaitMs: "typeaheadWaitMs", typeahead: "typeahead", typeaheadOptionField: "typeaheadOptionField", typeaheadGroupField: "typeaheadGroupField", typeaheadItemTemplate: "typeaheadItemTemplate", optionsListTemplate: "optionsListTemplate", typeaheadHideResultsOnBlur: "typeaheadHideResultsOnBlur", container: "container" }, outputs: { typeaheadLoading: "typeaheadLoading", typeaheadNoResults: "typeaheadNoResults", typeaheadOnSelect: "typeaheadOnSelect", typeaheadOnBlur: "typeaheadOnBlur" }, exportAs: ["bs-typeahead"] });
/** @nocollapse */
TypeaheadDirective.ctorParameters = () => [
    { type: NgControl, },
    { type: ElementRef, },
    { type: ViewContainerRef, },
    { type: Renderer2, },
    { type: TypeaheadConfig, },
    { type: ComponentLoaderFactory, },
    { type: ChangeDetectorRef, },
];
TypeaheadDirective.propDecorators = {
    "typeahead": [{ type: Input },],
    "typeaheadMinLength": [{ type: Input },],
    "typeaheadWaitMs": [{ type: Input },],
    "typeaheadOptionsLimit": [{ type: Input },],
    "typeaheadOptionField": [{ type: Input },],
    "typeaheadGroupField": [{ type: Input },],
    "typeaheadAsync": [{ type: Input },],
    "typeaheadLatinize": [{ type: Input },],
    "typeaheadSingleWords": [{ type: Input },],
    "typeaheadWordDelimiters": [{ type: Input },],
    "typeaheadPhraseDelimiters": [{ type: Input },],
    "typeaheadItemTemplate": [{ type: Input },],
    "optionsListTemplate": [{ type: Input },],
    "typeaheadScrollable": [{ type: Input },],
    "typeaheadOptionsInScrollableView": [{ type: Input },],
    "typeaheadHideResultsOnBlur": [{ type: Input },],
    "typeaheadSelectFirstItem": [{ type: Input },],
    "typeaheadLoading": [{ type: Output },],
    "typeaheadNoResults": [{ type: Output },],
    "typeaheadOnSelect": [{ type: Output },],
    "typeaheadOnBlur": [{ type: Output },],
    "container": [{ type: Input },],
    "dropup": [{ type: Input },],
    "onInput": [{ type: HostListener, args: ['input', ['$event'],] },],
    "onChange": [{ type: HostListener, args: ['keyup', ['$event'],] },],
    "onFocus": [{ type: HostListener, args: ['click',] }, { type: HostListener, args: ['focus',] },],
    "onBlur": [{ type: HostListener, args: ['blur',] },],
    "onKeydown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadDirective, [{
        type: Directive,
        args: [{ selector: '[typeahead]', exportAs: 'bs-typeahead' }]
    }], function () { return [{ type: ɵngcc2.NgControl }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Renderer2 }, { type: TypeaheadConfig }, { type: ɵngcc3.ComponentLoaderFactory }, { type: ɵngcc0.ChangeDetectorRef }]; }, { typeaheadMinLength: [{
            type: Input
        }], typeaheadAsync: [{
            type: Input
        }], typeaheadLatinize: [{
            type: Input
        }], typeaheadSingleWords: [{
            type: Input
        }], typeaheadWordDelimiters: [{
            type: Input
        }], typeaheadPhraseDelimiters: [{
            type: Input
        }], typeaheadScrollable: [{
            type: Input
        }], typeaheadOptionsInScrollableView: [{
            type: Input
        }], typeaheadSelectFirstItem: [{
            type: Input
        }], typeaheadLoading: [{
            type: Output
        }], typeaheadNoResults: [{
            type: Output
        }], typeaheadOnSelect: [{
            type: Output
        }], typeaheadOnBlur: [{
            type: Output
        }], dropup: [{
            type: Input
        }], typeaheadOptionsLimit: [{
            type: Input
        }], typeaheadWaitMs: [{
            type: Input
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], onChange: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], onFocus: [{
            type: HostListener,
            args: ['click']
        }, {
            type: HostListener,
            args: ['focus']
        }], onBlur: [{
            type: HostListener,
            args: ['blur']
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], typeahead: [{
            type: Input
        }], typeaheadOptionField: [{
            type: Input
        }], typeaheadGroupField: [{
            type: Input
        }], typeaheadItemTemplate: [{
            type: Input
        }], optionsListTemplate: [{
            type: Input
        }], typeaheadHideResultsOnBlur: [{
            type: Input
        }], container: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TypeaheadModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: TypeaheadModule,
            providers: [ComponentLoaderFactory, PositioningService, TypeaheadConfig]
        };
    }
}
TypeaheadModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TypeaheadModule });
TypeaheadModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TypeaheadModule_Factory(t) { return new (t || TypeaheadModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TypeaheadModule, { declarations: function () { return [TypeaheadContainerComponent,
        TypeaheadDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TypeaheadContainerComponent,
        TypeaheadDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [TypeaheadContainerComponent, TypeaheadDirective],
                exports: [TypeaheadContainerComponent, TypeaheadDirective],
                entryComponents: [TypeaheadContainerComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { latinMap, TypeaheadOptions, TypeaheadMatch, escapeRegexp, getValueFromObject, tokenize, latinize, TypeaheadContainerComponent, TypeaheadDirective, TypeaheadModule, TypeaheadConfig };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJvb3RzdHJhcC10eXBlYWhlYWQuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtYm9vdHN0cmFwL3R5cGVhaGVhZC9sYXRpbi1tYXAudHMiLCJuZzovbmd4LWJvb3RzdHJhcC90eXBlYWhlYWQvdHlwZWFoZWFkLW9wdGlvbnMuY2xhc3MudHMiLCJuZzovbmd4LWJvb3RzdHJhcC90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmNsYXNzLnRzIiwibmc6L25neC1ib290c3RyYXAvdHlwZWFoZWFkL3R5cGVhaGVhZC11dGlscy50cyIsIm5nOi9uZ3gtYm9vdHN0cmFwL3R5cGVhaGVhZC90eXBlYWhlYWQtY29udGFpbmVyLmNvbXBvbmVudC50cyIsIm5nOi9uZ3gtYm9vdHN0cmFwL3R5cGVhaGVhZC90eXBlYWhlYWQuY29uZmlnLnRzIiwibmc6L25neC1ib290c3RyYXAvdHlwZWFoZWFkL3R5cGVhaGVhZC5kaXJlY3RpdmUudHMiLCJuZzovbmd4LWJvb3RzdHJhcC90eXBlYWhlYWQvdHlwZWFoZWFkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsdUJBQWEsUUFBUSxHQUE4QjtBQUNuRCxJQUFJLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLElBQUk7QUFBRSxJQUNYLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsSUFBSTtBQUFFLElBQ1gsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxJQUFJO0FBQUUsSUFDWCxHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FBQUUsSUFDVixHQUFHLEVBQUUsR0FBRztBQUFFLElBQ1YsR0FBRyxFQUFFLEdBQUc7QUFBRSxJQUNWLEdBQUcsRUFBRSxHQUFHO0FB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QUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUN4ekJBLEFBS0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFDVkEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUNyQkEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFDcEVBLEFBK0RBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUF2QkEsQUFBQSxBQWNBLEFBQUEsQUE2TUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBMU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFoQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFnQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBSUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBWUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWxRQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFJQSxBQUVBLEFBbENBLEFBQUEsQUFNQSxBQUFBLEFBaURBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFnSUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQzdMQSxBQUlBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFJQSxBQUFBLEFBVEEsQUFBQSxBQ0ZBLEFBK0lBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQU5BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFsSEEsQUFBQSxBQUFBLEFBa0JBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFJQSxBQUFBLEFBSUEsQUFBQSxBQUtBLEFBQUEsQUFZQSxBQUFBLEFBRUEsQUFBQSxBQU9BLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFpQkEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFJQSxBQUFBLEFBV0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFDQSxBQUtBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUlBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUE5ZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBVkEsQUFBQSxBQVhBLEFBQUEsQUFTQSxBQUFBLEFBRkEsQUFBQSxBQVVBLEFBQUEsQUFIQSxBQUFBLEFBaEJBLEFBQUEsQUE2QkEsQUFBQSxBQUtBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUtBLEFBQUEsQUFJQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFJQSxBQUFBLEFBSUEsQUFBQSxBQUtBLEFBQUEsQUFLQSxBQUFBLEFBS0EsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUtBLEFBQUEsQUFJQSxBQUFBLEFBSUEsQUFBQSxBQUVBLEFBQUEsQUFHQSxBQUFBLEFBTUEsQUFBQSxBQUdBLEFBQUEsQUErRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQXVCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBK0JBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUN2UUEsQUFnQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFaQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbmV4cG9ydCBjb25zdCBsYXRpbk1hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICAnw4PCgSc6ICdBJyxcbiAgICAnw4TCgic6ICdBJyxcbiAgICAnw6HCusKuJzogJ0EnLFxuICAgICfDocK6wrYnOiAnQScsXG4gICAgJ8OhwrrCsCc6ICdBJyxcbiAgICAnw6HCusKyJzogJ0EnLFxuICAgICfDocK6wrQnOiAnQScsXG4gICAgJ8OHwo0nOiAnQScsXG4gICAgJ8ODwoInOiAnQScsXG4gICAgJ8OhwrrCpCc6ICdBJyxcbiAgICAnw6HCusKsJzogJ0EnLFxuICAgICfDocK6wqYnOiAnQScsXG4gICAgJ8OhwrrCqCc6ICdBJyxcbiAgICAnw6HCusKqJzogJ0EnLFxuICAgICfDg8KEJzogJ0EnLFxuICAgICfDh8KeJzogJ0EnLFxuICAgICfDiMKmJzogJ0EnLFxuICAgICfDh8KgJzogJ0EnLFxuICAgICfDocK6wqAnOiAnQScsXG4gICAgJ8OIwoAnOiAnQScsXG4gICAgJ8ODwoAnOiAnQScsXG4gICAgJ8OhwrrCoic6ICdBJyxcbiAgICAnw4jCgic6ICdBJyxcbiAgICAnw4TCgCc6ICdBJyxcbiAgICAnw4TChCc6ICdBJyxcbiAgICAnw4PChSc6ICdBJyxcbiAgICAnw4fCuic6ICdBJyxcbiAgICAnw6HCuMKAJzogJ0EnLFxuICAgICfDiMK6JzogJ0EnLFxuICAgICfDg8KDJzogJ0EnLFxuICAgICfDqsKcwrInOiAnQUEnLFxuICAgICfDg8KGJzogJ0FFJyxcbiAgICAnw4fCvCc6ICdBRScsXG4gICAgJ8OHwqInOiAnQUUnLFxuICAgICfDqsKcwrQnOiAnQU8nLFxuICAgICfDqsKcwrYnOiAnQVUnLFxuICAgICfDqsKcwrgnOiAnQVYnLFxuICAgICfDqsKcwronOiAnQVYnLFxuICAgICfDqsKcwrwnOiAnQVknLFxuICAgICfDocK4woInOiAnQicsXG4gICAgJ8OhwrjChCc6ICdCJyxcbiAgICAnw4bCgSc6ICdCJyxcbiAgICAnw6HCuMKGJzogJ0InLFxuICAgICfDicKDJzogJ0InLFxuICAgICfDhsKCJzogJ0InLFxuICAgICfDhMKGJzogJ0MnLFxuICAgICfDhMKMJzogJ0MnLFxuICAgICfDg8KHJzogJ0MnLFxuICAgICfDocK4wognOiAnQycsXG4gICAgJ8OEwognOiAnQycsXG4gICAgJ8OEwoonOiAnQycsXG4gICAgJ8OGwocnOiAnQycsXG4gICAgJ8OIwrsnOiAnQycsXG4gICAgJ8OEwo4nOiAnRCcsXG4gICAgJ8OhwrjCkCc6ICdEJyxcbiAgICAnw6HCuMKSJzogJ0QnLFxuICAgICfDocK4woonOiAnRCcsXG4gICAgJ8OhwrjCjCc6ICdEJyxcbiAgICAnw4bCiic6ICdEJyxcbiAgICAnw6HCuMKOJzogJ0QnLFxuICAgICfDh8KyJzogJ0QnLFxuICAgICfDh8KFJzogJ0QnLFxuICAgICfDhMKQJzogJ0QnLFxuICAgICfDhsKLJzogJ0QnLFxuICAgICfDh8KxJzogJ0RaJyxcbiAgICAnw4fChCc6ICdEWicsXG4gICAgJ8ODwoknOiAnRScsXG4gICAgJ8OEwpQnOiAnRScsXG4gICAgJ8OEwponOiAnRScsXG4gICAgJ8OIwqgnOiAnRScsXG4gICAgJ8OhwrjCnCc6ICdFJyxcbiAgICAnw4PCiic6ICdFJyxcbiAgICAnw6HCusK+JzogJ0UnLFxuICAgICfDocK7woYnOiAnRScsXG4gICAgJ8OhwrvCgCc6ICdFJyxcbiAgICAnw6HCu8KCJzogJ0UnLFxuICAgICfDocK7woQnOiAnRScsXG4gICAgJ8OhwrjCmCc6ICdFJyxcbiAgICAnw4PCiyc6ICdFJyxcbiAgICAnw4TClic6ICdFJyxcbiAgICAnw6HCusK4JzogJ0UnLFxuICAgICfDiMKEJzogJ0UnLFxuICAgICfDg8KIJzogJ0UnLFxuICAgICfDocK6wronOiAnRScsXG4gICAgJ8OIwoYnOiAnRScsXG4gICAgJ8OEwpInOiAnRScsXG4gICAgJ8OhwrjClic6ICdFJyxcbiAgICAnw6HCuMKUJzogJ0UnLFxuICAgICfDhMKYJzogJ0UnLFxuICAgICfDicKGJzogJ0UnLFxuICAgICfDocK6wrwnOiAnRScsXG4gICAgJ8OhwrjCmic6ICdFJyxcbiAgICAnw6rCncKqJzogJ0VUJyxcbiAgICAnw6HCuMKeJzogJ0YnLFxuICAgICfDhsKRJzogJ0YnLFxuICAgICfDh8K0JzogJ0cnLFxuICAgICfDhMKeJzogJ0cnLFxuICAgICfDh8KmJzogJ0cnLFxuICAgICfDhMKiJzogJ0cnLFxuICAgICfDhMKcJzogJ0cnLFxuICAgICfDhMKgJzogJ0cnLFxuICAgICfDhsKTJzogJ0cnLFxuICAgICfDocK4wqAnOiAnRycsXG4gICAgJ8OHwqQnOiAnRycsXG4gICAgJ8OhwrjCqic6ICdIJyxcbiAgICAnw4jCnic6ICdIJyxcbiAgICAnw6HCuMKoJzogJ0gnLFxuICAgICfDhMKkJzogJ0gnLFxuICAgICfDosKxwqcnOiAnSCcsXG4gICAgJ8OhwrjCpic6ICdIJyxcbiAgICAnw6HCuMKiJzogJ0gnLFxuICAgICfDocK4wqQnOiAnSCcsXG4gICAgJ8OEwqYnOiAnSCcsXG4gICAgJ8ODwo0nOiAnSScsXG4gICAgJ8OEwqwnOiAnSScsXG4gICAgJ8OHwo8nOiAnSScsXG4gICAgJ8ODwo4nOiAnSScsXG4gICAgJ8ODwo8nOiAnSScsXG4gICAgJ8OhwrjCric6ICdJJyxcbiAgICAnw4TCsCc6ICdJJyxcbiAgICAnw6HCu8KKJzogJ0knLFxuICAgICfDiMKIJzogJ0knLFxuICAgICfDg8KMJzogJ0knLFxuICAgICfDocK7wognOiAnSScsXG4gICAgJ8OIwoonOiAnSScsXG4gICAgJ8OEwqonOiAnSScsXG4gICAgJ8OEwq4nOiAnSScsXG4gICAgJ8OGwpcnOiAnSScsXG4gICAgJ8OEwqgnOiAnSScsXG4gICAgJ8OhwrjCrCc6ICdJJyxcbiAgICAnw6rCncK5JzogJ0QnLFxuICAgICfDqsKdwrsnOiAnRicsXG4gICAgJ8Oqwp3CvSc6ICdHJyxcbiAgICAnw6rCnsKCJzogJ1InLFxuICAgICfDqsKewoQnOiAnUycsXG4gICAgJ8Oqwp7Chic6ICdUJyxcbiAgICAnw6rCncKsJzogJ0lTJyxcbiAgICAnw4TCtCc6ICdKJyxcbiAgICAnw4nCiCc6ICdKJyxcbiAgICAnw6HCuMKwJzogJ0snLFxuICAgICfDh8KoJzogJ0snLFxuICAgICfDhMK2JzogJ0snLFxuICAgICfDosKxwqknOiAnSycsXG4gICAgJ8Oqwp3Cgic6ICdLJyxcbiAgICAnw6HCuMKyJzogJ0snLFxuICAgICfDhsKYJzogJ0snLFxuICAgICfDocK4wrQnOiAnSycsXG4gICAgJ8Oqwp3CgCc6ICdLJyxcbiAgICAnw6rCncKEJzogJ0snLFxuICAgICfDhMK5JzogJ0wnLFxuICAgICfDiMK9JzogJ0wnLFxuICAgICfDhMK9JzogJ0wnLFxuICAgICfDhMK7JzogJ0wnLFxuICAgICfDocK4wrwnOiAnTCcsXG4gICAgJ8OhwrjCtic6ICdMJyxcbiAgICAnw6HCuMK4JzogJ0wnLFxuICAgICfDosKxwqAnOiAnTCcsXG4gICAgJ8Oqwp3CiCc6ICdMJyxcbiAgICAnw6HCuMK6JzogJ0wnLFxuICAgICfDhMK/JzogJ0wnLFxuICAgICfDosKxwqInOiAnTCcsXG4gICAgJ8OHwognOiAnTCcsXG4gICAgJ8OFwoEnOiAnTCcsXG4gICAgJ8OHwocnOiAnTEonLFxuICAgICfDocK4wr4nOiAnTScsXG4gICAgJ8OhwrnCgCc6ICdNJyxcbiAgICAnw6HCucKCJzogJ00nLFxuICAgICfDosKxwq4nOiAnTScsXG4gICAgJ8OFwoMnOiAnTicsXG4gICAgJ8OFwocnOiAnTicsXG4gICAgJ8OFwoUnOiAnTicsXG4gICAgJ8OhwrnCiic6ICdOJyxcbiAgICAnw6HCucKEJzogJ04nLFxuICAgICfDocK5woYnOiAnTicsXG4gICAgJ8OHwrgnOiAnTicsXG4gICAgJ8OGwp0nOiAnTicsXG4gICAgJ8OhwrnCiCc6ICdOJyxcbiAgICAnw4jCoCc6ICdOJyxcbiAgICAnw4fCiyc6ICdOJyxcbiAgICAnw4PCkSc6ICdOJyxcbiAgICAnw4fCiic6ICdOSicsXG4gICAgJ8ODwpMnOiAnTycsXG4gICAgJ8OFwo4nOiAnTycsXG4gICAgJ8OHwpEnOiAnTycsXG4gICAgJ8ODwpQnOiAnTycsXG4gICAgJ8OhwrvCkCc6ICdPJyxcbiAgICAnw6HCu8KYJzogJ08nLFxuICAgICfDocK7wpInOiAnTycsXG4gICAgJ8OhwrvClCc6ICdPJyxcbiAgICAnw6HCu8KWJzogJ08nLFxuICAgICfDg8KWJzogJ08nLFxuICAgICfDiMKqJzogJ08nLFxuICAgICfDiMKuJzogJ08nLFxuICAgICfDiMKwJzogJ08nLFxuICAgICfDocK7wownOiAnTycsXG4gICAgJ8OFwpAnOiAnTycsXG4gICAgJ8OIwownOiAnTycsXG4gICAgJ8ODwpInOiAnTycsXG4gICAgJ8OhwrvCjic6ICdPJyxcbiAgICAnw4bCoCc6ICdPJyxcbiAgICAnw6HCu8KaJzogJ08nLFxuICAgICfDocK7wqInOiAnTycsXG4gICAgJ8OhwrvCnCc6ICdPJyxcbiAgICAnw6HCu8KeJzogJ08nLFxuICAgICfDocK7wqAnOiAnTycsXG4gICAgJ8OIwo4nOiAnTycsXG4gICAgJ8Oqwp3Ciic6ICdPJyxcbiAgICAnw6rCncKMJzogJ08nLFxuICAgICfDhcKMJzogJ08nLFxuICAgICfDocK5wpInOiAnTycsXG4gICAgJ8OhwrnCkCc6ICdPJyxcbiAgICAnw4bCnyc6ICdPJyxcbiAgICAnw4fCqic6ICdPJyxcbiAgICAnw4fCrCc6ICdPJyxcbiAgICAnw4PCmCc6ICdPJyxcbiAgICAnw4fCvic6ICdPJyxcbiAgICAnw4PClSc6ICdPJyxcbiAgICAnw6HCucKMJzogJ08nLFxuICAgICfDocK5wo4nOiAnTycsXG4gICAgJ8OIwqwnOiAnTycsXG4gICAgJ8OGwqInOiAnT0knLFxuICAgICfDqsKdwo4nOiAnT08nLFxuICAgICfDhsKQJzogJ0UnLFxuICAgICfDhsKGJzogJ08nLFxuICAgICfDiMKiJzogJ09VJyxcbiAgICAnw6HCucKUJzogJ1AnLFxuICAgICfDocK5wpYnOiAnUCcsXG4gICAgJ8Oqwp3Ckic6ICdQJyxcbiAgICAnw4bCpCc6ICdQJyxcbiAgICAnw6rCncKUJzogJ1AnLFxuICAgICfDosKxwqMnOiAnUCcsXG4gICAgJ8Oqwp3CkCc6ICdQJyxcbiAgICAnw6rCncKYJzogJ1EnLFxuICAgICfDqsKdwpYnOiAnUScsXG4gICAgJ8OFwpQnOiAnUicsXG4gICAgJ8OFwpgnOiAnUicsXG4gICAgJ8OFwpYnOiAnUicsXG4gICAgJ8OhwrnCmCc6ICdSJyxcbiAgICAnw6HCucKaJzogJ1InLFxuICAgICfDocK5wpwnOiAnUicsXG4gICAgJ8OIwpAnOiAnUicsXG4gICAgJ8OIwpInOiAnUicsXG4gICAgJ8OhwrnCnic6ICdSJyxcbiAgICAnw4nCjCc6ICdSJyxcbiAgICAnw6LCscKkJzogJ1InLFxuICAgICfDqsKcwr4nOiAnQycsXG4gICAgJ8OGwo4nOiAnRScsXG4gICAgJ8OFwponOiAnUycsXG4gICAgJ8OhwrnCpCc6ICdTJyxcbiAgICAnw4XCoCc6ICdTJyxcbiAgICAnw6HCucKmJzogJ1MnLFxuICAgICfDhcKeJzogJ1MnLFxuICAgICfDhcKcJzogJ1MnLFxuICAgICfDiMKYJzogJ1MnLFxuICAgICfDocK5wqAnOiAnUycsXG4gICAgJ8OhwrnCoic6ICdTJyxcbiAgICAnw6HCucKoJzogJ1MnLFxuICAgICfDhcKkJzogJ1QnLFxuICAgICfDhcKiJzogJ1QnLFxuICAgICfDocK5wrAnOiAnVCcsXG4gICAgJ8OIwponOiAnVCcsXG4gICAgJ8OIwr4nOiAnVCcsXG4gICAgJ8OhwrnCqic6ICdUJyxcbiAgICAnw6HCucKsJzogJ1QnLFxuICAgICfDhsKsJzogJ1QnLFxuICAgICfDocK5wq4nOiAnVCcsXG4gICAgJ8OGwq4nOiAnVCcsXG4gICAgJ8OFwqYnOiAnVCcsXG4gICAgJ8OiwrHCryc6ICdBJyxcbiAgICAnw6rCnsKAJzogJ0wnLFxuICAgICfDhsKcJzogJ00nLFxuICAgICfDicKFJzogJ1YnLFxuICAgICfDqsKcwqgnOiAnVFonLFxuICAgICfDg8KaJzogJ1UnLFxuICAgICfDhcKsJzogJ1UnLFxuICAgICfDh8KTJzogJ1UnLFxuICAgICfDg8KbJzogJ1UnLFxuICAgICfDocK5wrYnOiAnVScsXG4gICAgJ8ODwpwnOiAnVScsXG4gICAgJ8OHwpcnOiAnVScsXG4gICAgJ8OHwpknOiAnVScsXG4gICAgJ8OHwpsnOiAnVScsXG4gICAgJ8OHwpUnOiAnVScsXG4gICAgJ8OhwrnCsic6ICdVJyxcbiAgICAnw6HCu8KkJzogJ1UnLFxuICAgICfDhcKwJzogJ1UnLFxuICAgICfDiMKUJzogJ1UnLFxuICAgICfDg8KZJzogJ1UnLFxuICAgICfDocK7wqYnOiAnVScsXG4gICAgJ8OGwq8nOiAnVScsXG4gICAgJ8OhwrvCqCc6ICdVJyxcbiAgICAnw6HCu8KwJzogJ1UnLFxuICAgICfDocK7wqonOiAnVScsXG4gICAgJ8OhwrvCrCc6ICdVJyxcbiAgICAnw6HCu8KuJzogJ1UnLFxuICAgICfDiMKWJzogJ1UnLFxuICAgICfDhcKqJzogJ1UnLFxuICAgICfDocK5wronOiAnVScsXG4gICAgJ8OFwrInOiAnVScsXG4gICAgJ8OFwq4nOiAnVScsXG4gICAgJ8OFwqgnOiAnVScsXG4gICAgJ8OhwrnCuCc6ICdVJyxcbiAgICAnw6HCucK0JzogJ1UnLFxuICAgICfDqsKdwp4nOiAnVicsXG4gICAgJ8OhwrnCvic6ICdWJyxcbiAgICAnw4bCsic6ICdWJyxcbiAgICAnw6HCucK8JzogJ1YnLFxuICAgICfDqsKdwqAnOiAnVlknLFxuICAgICfDocK6woInOiAnVycsXG4gICAgJ8OFwrQnOiAnVycsXG4gICAgJ8OhwrrChCc6ICdXJyxcbiAgICAnw6HCusKGJzogJ1cnLFxuICAgICfDocK6wognOiAnVycsXG4gICAgJ8OhwrrCgCc6ICdXJyxcbiAgICAnw6LCscKyJzogJ1cnLFxuICAgICfDocK6wownOiAnWCcsXG4gICAgJ8OhwrrCiic6ICdYJyxcbiAgICAnw4PCnSc6ICdZJyxcbiAgICAnw4XCtic6ICdZJyxcbiAgICAnw4XCuCc6ICdZJyxcbiAgICAnw6HCusKOJzogJ1knLFxuICAgICfDocK7wrQnOiAnWScsXG4gICAgJ8OhwrvCsic6ICdZJyxcbiAgICAnw4bCsyc6ICdZJyxcbiAgICAnw6HCu8K2JzogJ1knLFxuICAgICfDocK7wr4nOiAnWScsXG4gICAgJ8OIwrInOiAnWScsXG4gICAgJ8OJwo4nOiAnWScsXG4gICAgJ8OhwrvCuCc6ICdZJyxcbiAgICAnw4XCuSc6ICdaJyxcbiAgICAnw4XCvSc6ICdaJyxcbiAgICAnw6HCusKQJzogJ1onLFxuICAgICfDosKxwqsnOiAnWicsXG4gICAgJ8OFwrsnOiAnWicsXG4gICAgJ8OhwrrCkic6ICdaJyxcbiAgICAnw4jCpCc6ICdaJyxcbiAgICAnw6HCusKUJzogJ1onLFxuICAgICfDhsK1JzogJ1onLFxuICAgICfDhMKyJzogJ0lKJyxcbiAgICAnw4XCkic6ICdPRScsXG4gICAgJ8OhwrTCgCc6ICdBJyxcbiAgICAnw6HCtMKBJzogJ0FFJyxcbiAgICAnw4rCmSc6ICdCJyxcbiAgICAnw6HCtMKDJzogJ0InLFxuICAgICfDocK0woQnOiAnQycsXG4gICAgJ8OhwrTChSc6ICdEJyxcbiAgICAnw6HCtMKHJzogJ0UnLFxuICAgICfDqsKcwrAnOiAnRicsXG4gICAgJ8OJwqInOiAnRycsXG4gICAgJ8OKwpsnOiAnRycsXG4gICAgJ8OKwpwnOiAnSCcsXG4gICAgJ8OJwqonOiAnSScsXG4gICAgJ8OKwoEnOiAnUicsXG4gICAgJ8OhwrTCiic6ICdKJyxcbiAgICAnw6HCtMKLJzogJ0snLFxuICAgICfDisKfJzogJ0wnLFxuICAgICfDocK0wownOiAnTCcsXG4gICAgJ8OhwrTCjSc6ICdNJyxcbiAgICAnw4nCtCc6ICdOJyxcbiAgICAnw6HCtMKPJzogJ08nLFxuICAgICfDicK2JzogJ09FJyxcbiAgICAnw6HCtMKQJzogJ08nLFxuICAgICfDocK0wpUnOiAnT1UnLFxuICAgICfDocK0wpgnOiAnUCcsXG4gICAgJ8OKwoAnOiAnUicsXG4gICAgJ8OhwrTCjic6ICdOJyxcbiAgICAnw6HCtMKZJzogJ1InLFxuICAgICfDqsKcwrEnOiAnUycsXG4gICAgJ8OhwrTCmyc6ICdUJyxcbiAgICAnw6LCscK7JzogJ0UnLFxuICAgICfDocK0wponOiAnUicsXG4gICAgJ8OhwrTCnCc6ICdVJyxcbiAgICAnw6HCtMKgJzogJ1YnLFxuICAgICfDocK0wqEnOiAnVycsXG4gICAgJ8OKwo8nOiAnWScsXG4gICAgJ8OhwrTCoic6ICdaJyxcbiAgICAnw4PCoSc6ICdhJyxcbiAgICAnw4TCgyc6ICdhJyxcbiAgICAnw6HCusKvJzogJ2EnLFxuICAgICfDocK6wrcnOiAnYScsXG4gICAgJ8OhwrrCsSc6ICdhJyxcbiAgICAnw6HCusKzJzogJ2EnLFxuICAgICfDocK6wrUnOiAnYScsXG4gICAgJ8OHwo4nOiAnYScsXG4gICAgJ8ODwqInOiAnYScsXG4gICAgJ8OhwrrCpSc6ICdhJyxcbiAgICAnw6HCusKtJzogJ2EnLFxuICAgICfDocK6wqcnOiAnYScsXG4gICAgJ8OhwrrCqSc6ICdhJyxcbiAgICAnw6HCusKrJzogJ2EnLFxuICAgICfDg8KkJzogJ2EnLFxuICAgICfDh8KfJzogJ2EnLFxuICAgICfDiMKnJzogJ2EnLFxuICAgICfDh8KhJzogJ2EnLFxuICAgICfDocK6wqEnOiAnYScsXG4gICAgJ8OIwoEnOiAnYScsXG4gICAgJ8ODwqAnOiAnYScsXG4gICAgJ8OhwrrCoyc6ICdhJyxcbiAgICAnw4jCgyc6ICdhJyxcbiAgICAnw4TCgSc6ICdhJyxcbiAgICAnw4TChSc6ICdhJyxcbiAgICAnw6HCtsKPJzogJ2EnLFxuICAgICfDocK6wponOiAnYScsXG4gICAgJ8ODwqUnOiAnYScsXG4gICAgJ8OHwrsnOiAnYScsXG4gICAgJ8OhwrjCgSc6ICdhJyxcbiAgICAnw6LCscKlJzogJ2EnLFxuICAgICfDg8KjJzogJ2EnLFxuICAgICfDqsKcwrMnOiAnYWEnLFxuICAgICfDg8KmJzogJ2FlJyxcbiAgICAnw4fCvSc6ICdhZScsXG4gICAgJ8OHwqMnOiAnYWUnLFxuICAgICfDqsKcwrUnOiAnYW8nLFxuICAgICfDqsKcwrcnOiAnYXUnLFxuICAgICfDqsKcwrknOiAnYXYnLFxuICAgICfDqsKcwrsnOiAnYXYnLFxuICAgICfDqsKcwr0nOiAnYXknLFxuICAgICfDocK4woMnOiAnYicsXG4gICAgJ8OhwrjChSc6ICdiJyxcbiAgICAnw4nCkyc6ICdiJyxcbiAgICAnw6HCuMKHJzogJ2InLFxuICAgICfDocK1wqwnOiAnYicsXG4gICAgJ8OhwrbCgCc6ICdiJyxcbiAgICAnw4bCgCc6ICdiJyxcbiAgICAnw4bCgyc6ICdiJyxcbiAgICAnw4nCtSc6ICdvJyxcbiAgICAnw4TChyc6ICdjJyxcbiAgICAnw4TCjSc6ICdjJyxcbiAgICAnw4PCpyc6ICdjJyxcbiAgICAnw6HCuMKJJzogJ2MnLFxuICAgICfDhMKJJzogJ2MnLFxuICAgICfDicKVJzogJ2MnLFxuICAgICfDhMKLJzogJ2MnLFxuICAgICfDhsKIJzogJ2MnLFxuICAgICfDiMK8JzogJ2MnLFxuICAgICfDhMKPJzogJ2QnLFxuICAgICfDocK4wpEnOiAnZCcsXG4gICAgJ8OhwrjCkyc6ICdkJyxcbiAgICAnw4jCoSc6ICdkJyxcbiAgICAnw6HCuMKLJzogJ2QnLFxuICAgICfDocK4wo0nOiAnZCcsXG4gICAgJ8OJwpcnOiAnZCcsXG4gICAgJ8OhwrbCkSc6ICdkJyxcbiAgICAnw6HCuMKPJzogJ2QnLFxuICAgICfDocK1wq0nOiAnZCcsXG4gICAgJ8OhwrbCgSc6ICdkJyxcbiAgICAnw4TCkSc6ICdkJyxcbiAgICAnw4nClic6ICdkJyxcbiAgICAnw4bCjCc6ICdkJyxcbiAgICAnw4TCsSc6ICdpJyxcbiAgICAnw4jCtyc6ICdqJyxcbiAgICAnw4nCnyc6ICdqJyxcbiAgICAnw4rChCc6ICdqJyxcbiAgICAnw4fCsyc6ICdkeicsXG4gICAgJ8OHwoYnOiAnZHonLFxuICAgICfDg8KpJzogJ2UnLFxuICAgICfDhMKVJzogJ2UnLFxuICAgICfDhMKbJzogJ2UnLFxuICAgICfDiMKpJzogJ2UnLFxuICAgICfDocK4wp0nOiAnZScsXG4gICAgJ8ODwqonOiAnZScsXG4gICAgJ8OhwrrCvyc6ICdlJyxcbiAgICAnw6HCu8KHJzogJ2UnLFxuICAgICfDocK7woEnOiAnZScsXG4gICAgJ8OhwrvCgyc6ICdlJyxcbiAgICAnw6HCu8KFJzogJ2UnLFxuICAgICfDocK4wpknOiAnZScsXG4gICAgJ8ODwqsnOiAnZScsXG4gICAgJ8OEwpcnOiAnZScsXG4gICAgJ8OhwrrCuSc6ICdlJyxcbiAgICAnw4jChSc6ICdlJyxcbiAgICAnw4PCqCc6ICdlJyxcbiAgICAnw6HCusK7JzogJ2UnLFxuICAgICfDiMKHJzogJ2UnLFxuICAgICfDhMKTJzogJ2UnLFxuICAgICfDocK4wpcnOiAnZScsXG4gICAgJ8OhwrjClSc6ICdlJyxcbiAgICAnw6LCscK4JzogJ2UnLFxuICAgICfDhMKZJzogJ2UnLFxuICAgICfDocK2wpInOiAnZScsXG4gICAgJ8OJwocnOiAnZScsXG4gICAgJ8OhwrrCvSc6ICdlJyxcbiAgICAnw6HCuMKbJzogJ2UnLFxuICAgICfDqsKdwqsnOiAnZXQnLFxuICAgICfDocK4wp8nOiAnZicsXG4gICAgJ8OGwpInOiAnZicsXG4gICAgJ8OhwrXCric6ICdmJyxcbiAgICAnw6HCtsKCJzogJ2YnLFxuICAgICfDh8K1JzogJ2cnLFxuICAgICfDhMKfJzogJ2cnLFxuICAgICfDh8KnJzogJ2cnLFxuICAgICfDhMKjJzogJ2cnLFxuICAgICfDhMKdJzogJ2cnLFxuICAgICfDhMKhJzogJ2cnLFxuICAgICfDicKgJzogJ2cnLFxuICAgICfDocK4wqEnOiAnZycsXG4gICAgJ8OhwrbCgyc6ICdnJyxcbiAgICAnw4fCpSc6ICdnJyxcbiAgICAnw6HCuMKrJzogJ2gnLFxuICAgICfDiMKfJzogJ2gnLFxuICAgICfDocK4wqknOiAnaCcsXG4gICAgJ8OEwqUnOiAnaCcsXG4gICAgJ8OiwrHCqCc6ICdoJyxcbiAgICAnw6HCuMKnJzogJ2gnLFxuICAgICfDocK4wqMnOiAnaCcsXG4gICAgJ8OhwrjCpSc6ICdoJyxcbiAgICAnw4nCpic6ICdoJyxcbiAgICAnw6HCusKWJzogJ2gnLFxuICAgICfDhMKnJzogJ2gnLFxuICAgICfDhsKVJzogJ2h2JyxcbiAgICAnw4PCrSc6ICdpJyxcbiAgICAnw4TCrSc6ICdpJyxcbiAgICAnw4fCkCc6ICdpJyxcbiAgICAnw4PCric6ICdpJyxcbiAgICAnw4PCryc6ICdpJyxcbiAgICAnw6HCuMKvJzogJ2knLFxuICAgICfDocK7wosnOiAnaScsXG4gICAgJ8OIwoknOiAnaScsXG4gICAgJ8ODwqwnOiAnaScsXG4gICAgJ8OhwrvCiSc6ICdpJyxcbiAgICAnw4jCiyc6ICdpJyxcbiAgICAnw4TCqyc6ICdpJyxcbiAgICAnw4TCryc6ICdpJyxcbiAgICAnw6HCtsKWJzogJ2knLFxuICAgICfDicKoJzogJ2knLFxuICAgICfDhMKpJzogJ2knLFxuICAgICfDocK4wq0nOiAnaScsXG4gICAgJ8Oqwp3Cuic6ICdkJyxcbiAgICAnw6rCncK8JzogJ2YnLFxuICAgICfDocK1wrknOiAnZycsXG4gICAgJ8Oqwp7Cgyc6ICdyJyxcbiAgICAnw6rCnsKFJzogJ3MnLFxuICAgICfDqsKewocnOiAndCcsXG4gICAgJ8Oqwp3CrSc6ICdpcycsXG4gICAgJ8OHwrAnOiAnaicsXG4gICAgJ8OEwrUnOiAnaicsXG4gICAgJ8OKwp0nOiAnaicsXG4gICAgJ8OJwoknOiAnaicsXG4gICAgJ8OhwrjCsSc6ICdrJyxcbiAgICAnw4fCqSc6ICdrJyxcbiAgICAnw4TCtyc6ICdrJyxcbiAgICAnw6LCscKqJzogJ2snLFxuICAgICfDqsKdwoMnOiAnaycsXG4gICAgJ8OhwrjCsyc6ICdrJyxcbiAgICAnw4bCmSc6ICdrJyxcbiAgICAnw6HCuMK1JzogJ2snLFxuICAgICfDocK2woQnOiAnaycsXG4gICAgJ8Oqwp3CgSc6ICdrJyxcbiAgICAnw6rCncKFJzogJ2snLFxuICAgICfDhMK6JzogJ2wnLFxuICAgICfDhsKaJzogJ2wnLFxuICAgICfDicKsJzogJ2wnLFxuICAgICfDhMK+JzogJ2wnLFxuICAgICfDhMK8JzogJ2wnLFxuICAgICfDocK4wr0nOiAnbCcsXG4gICAgJ8OIwrQnOiAnbCcsXG4gICAgJ8OhwrjCtyc6ICdsJyxcbiAgICAnw6HCuMK5JzogJ2wnLFxuICAgICfDosKxwqEnOiAnbCcsXG4gICAgJ8Oqwp3CiSc6ICdsJyxcbiAgICAnw6HCuMK7JzogJ2wnLFxuICAgICfDhcKAJzogJ2wnLFxuICAgICfDicKrJzogJ2wnLFxuICAgICfDocK2woUnOiAnbCcsXG4gICAgJ8OJwq0nOiAnbCcsXG4gICAgJ8OFwoInOiAnbCcsXG4gICAgJ8OHwoknOiAnbGonLFxuICAgICfDhcK/JzogJ3MnLFxuICAgICfDocK6wpwnOiAncycsXG4gICAgJ8OhwrrCmyc6ICdzJyxcbiAgICAnw6HCusKdJzogJ3MnLFxuICAgICfDocK4wr8nOiAnbScsXG4gICAgJ8OhwrnCgSc6ICdtJyxcbiAgICAnw6HCucKDJzogJ20nLFxuICAgICfDicKxJzogJ20nLFxuICAgICfDocK1wq8nOiAnbScsXG4gICAgJ8OhwrbChic6ICdtJyxcbiAgICAnw4XChCc6ICduJyxcbiAgICAnw4XCiCc6ICduJyxcbiAgICAnw4XChic6ICduJyxcbiAgICAnw6HCucKLJzogJ24nLFxuICAgICfDiMK1JzogJ24nLFxuICAgICfDocK5woUnOiAnbicsXG4gICAgJ8OhwrnChyc6ICduJyxcbiAgICAnw4fCuSc6ICduJyxcbiAgICAnw4nCsic6ICduJyxcbiAgICAnw6HCucKJJzogJ24nLFxuICAgICfDhsKeJzogJ24nLFxuICAgICfDocK1wrAnOiAnbicsXG4gICAgJ8OhwrbChyc6ICduJyxcbiAgICAnw4nCsyc6ICduJyxcbiAgICAnw4PCsSc6ICduJyxcbiAgICAnw4fCjCc6ICduaicsXG4gICAgJ8ODwrMnOiAnbycsXG4gICAgJ8OFwo8nOiAnbycsXG4gICAgJ8OHwpInOiAnbycsXG4gICAgJ8ODwrQnOiAnbycsXG4gICAgJ8OhwrvCkSc6ICdvJyxcbiAgICAnw6HCu8KZJzogJ28nLFxuICAgICfDocK7wpMnOiAnbycsXG4gICAgJ8OhwrvClSc6ICdvJyxcbiAgICAnw6HCu8KXJzogJ28nLFxuICAgICfDg8K2JzogJ28nLFxuICAgICfDiMKrJzogJ28nLFxuICAgICfDiMKvJzogJ28nLFxuICAgICfDiMKxJzogJ28nLFxuICAgICfDocK7wo0nOiAnbycsXG4gICAgJ8OFwpEnOiAnbycsXG4gICAgJ8OIwo0nOiAnbycsXG4gICAgJ8ODwrInOiAnbycsXG4gICAgJ8OhwrvCjyc6ICdvJyxcbiAgICAnw4bCoSc6ICdvJyxcbiAgICAnw6HCu8KbJzogJ28nLFxuICAgICfDocK7wqMnOiAnbycsXG4gICAgJ8OhwrvCnSc6ICdvJyxcbiAgICAnw6HCu8KfJzogJ28nLFxuICAgICfDocK7wqEnOiAnbycsXG4gICAgJ8OIwo8nOiAnbycsXG4gICAgJ8Oqwp3Ciyc6ICdvJyxcbiAgICAnw6rCncKNJzogJ28nLFxuICAgICfDosKxwronOiAnbycsXG4gICAgJ8OFwo0nOiAnbycsXG4gICAgJ8OhwrnCkyc6ICdvJyxcbiAgICAnw6HCucKRJzogJ28nLFxuICAgICfDh8KrJzogJ28nLFxuICAgICfDh8KtJzogJ28nLFxuICAgICfDg8K4JzogJ28nLFxuICAgICfDh8K/JzogJ28nLFxuICAgICfDg8K1JzogJ28nLFxuICAgICfDocK5wo0nOiAnbycsXG4gICAgJ8OhwrnCjyc6ICdvJyxcbiAgICAnw4jCrSc6ICdvJyxcbiAgICAnw4bCoyc6ICdvaScsXG4gICAgJ8Oqwp3Cjyc6ICdvbycsXG4gICAgJ8OJwpsnOiAnZScsXG4gICAgJ8OhwrbCkyc6ICdlJyxcbiAgICAnw4nClCc6ICdvJyxcbiAgICAnw6HCtsKXJzogJ28nLFxuICAgICfDiMKjJzogJ291JyxcbiAgICAnw6HCucKVJzogJ3AnLFxuICAgICfDocK5wpcnOiAncCcsXG4gICAgJ8Oqwp3Ckyc6ICdwJyxcbiAgICAnw4bCpSc6ICdwJyxcbiAgICAnw6HCtcKxJzogJ3AnLFxuICAgICfDocK2wognOiAncCcsXG4gICAgJ8Oqwp3ClSc6ICdwJyxcbiAgICAnw6HCtcK9JzogJ3AnLFxuICAgICfDqsKdwpEnOiAncCcsXG4gICAgJ8Oqwp3CmSc6ICdxJyxcbiAgICAnw4rCoCc6ICdxJyxcbiAgICAnw4nCiyc6ICdxJyxcbiAgICAnw6rCncKXJzogJ3EnLFxuICAgICfDhcKVJzogJ3InLFxuICAgICfDhcKZJzogJ3InLFxuICAgICfDhcKXJzogJ3InLFxuICAgICfDocK5wpknOiAncicsXG4gICAgJ8OhwrnCmyc6ICdyJyxcbiAgICAnw6HCucKdJzogJ3InLFxuICAgICfDiMKRJzogJ3InLFxuICAgICfDicK+JzogJ3InLFxuICAgICfDocK1wrMnOiAncicsXG4gICAgJ8OIwpMnOiAncicsXG4gICAgJ8OhwrnCnyc6ICdyJyxcbiAgICAnw4nCvCc6ICdyJyxcbiAgICAnw6HCtcKyJzogJ3InLFxuICAgICfDocK2woknOiAncicsXG4gICAgJ8OJwo0nOiAncicsXG4gICAgJ8OJwr0nOiAncicsXG4gICAgJ8OiwobChCc6ICdjJyxcbiAgICAnw6rCnMK/JzogJ2MnLFxuICAgICfDicKYJzogJ2UnLFxuICAgICfDicK/JzogJ3InLFxuICAgICfDhcKbJzogJ3MnLFxuICAgICfDocK5wqUnOiAncycsXG4gICAgJ8OFwqEnOiAncycsXG4gICAgJ8OhwrnCpyc6ICdzJyxcbiAgICAnw4XCnyc6ICdzJyxcbiAgICAnw4XCnSc6ICdzJyxcbiAgICAnw4jCmSc6ICdzJyxcbiAgICAnw6HCucKhJzogJ3MnLFxuICAgICfDocK5wqMnOiAncycsXG4gICAgJ8OhwrnCqSc6ICdzJyxcbiAgICAnw4rCgic6ICdzJyxcbiAgICAnw6HCtcK0JzogJ3MnLFxuICAgICfDocK2woonOiAncycsXG4gICAgJ8OIwr8nOiAncycsXG4gICAgJ8OJwqEnOiAnZycsXG4gICAgJ8OhwrTCkSc6ICdvJyxcbiAgICAnw6HCtMKTJzogJ28nLFxuICAgICfDocK0wp0nOiAndScsXG4gICAgJ8OFwqUnOiAndCcsXG4gICAgJ8OFwqMnOiAndCcsXG4gICAgJ8OhwrnCsSc6ICd0JyxcbiAgICAnw4jCmyc6ICd0JyxcbiAgICAnw4jCtic6ICd0JyxcbiAgICAnw6HCusKXJzogJ3QnLFxuICAgICfDosKxwqYnOiAndCcsXG4gICAgJ8OhwrnCqyc6ICd0JyxcbiAgICAnw6HCucKtJzogJ3QnLFxuICAgICfDhsKtJzogJ3QnLFxuICAgICfDocK5wq8nOiAndCcsXG4gICAgJ8OhwrXCtSc6ICd0JyxcbiAgICAnw4bCqyc6ICd0JyxcbiAgICAnw4rCiCc6ICd0JyxcbiAgICAnw4XCpyc6ICd0JyxcbiAgICAnw6HCtcK6JzogJ3RoJyxcbiAgICAnw4nCkCc6ICdhJyxcbiAgICAnw6HCtMKCJzogJ2FlJyxcbiAgICAnw4fCnSc6ICdlJyxcbiAgICAnw6HCtcK3JzogJ2cnLFxuICAgICfDicKlJzogJ2gnLFxuICAgICfDisKuJzogJ2gnLFxuICAgICfDisKvJzogJ2gnLFxuICAgICfDocK0woknOiAnaScsXG4gICAgJ8OKwp4nOiAnaycsXG4gICAgJ8Oqwp7CgSc6ICdsJyxcbiAgICAnw4nCryc6ICdtJyxcbiAgICAnw4nCsCc6ICdtJyxcbiAgICAnw6HCtMKUJzogJ29lJyxcbiAgICAnw4nCuSc6ICdyJyxcbiAgICAnw4nCuyc6ICdyJyxcbiAgICAnw4nCuic6ICdyJyxcbiAgICAnw6LCscK5JzogJ3InLFxuICAgICfDisKHJzogJ3QnLFxuICAgICfDisKMJzogJ3YnLFxuICAgICfDisKNJzogJ3cnLFxuICAgICfDisKOJzogJ3knLFxuICAgICfDqsKcwqknOiAndHonLFxuICAgICfDg8K6JzogJ3UnLFxuICAgICfDhcKtJzogJ3UnLFxuICAgICfDh8KUJzogJ3UnLFxuICAgICfDg8K7JzogJ3UnLFxuICAgICfDocK5wrcnOiAndScsXG4gICAgJ8ODwrwnOiAndScsXG4gICAgJ8OHwpgnOiAndScsXG4gICAgJ8OHwponOiAndScsXG4gICAgJ8OHwpwnOiAndScsXG4gICAgJ8OHwpYnOiAndScsXG4gICAgJ8OhwrnCsyc6ICd1JyxcbiAgICAnw6HCu8KlJzogJ3UnLFxuICAgICfDhcKxJzogJ3UnLFxuICAgICfDiMKVJzogJ3UnLFxuICAgICfDg8K5JzogJ3UnLFxuICAgICfDocK7wqcnOiAndScsXG4gICAgJ8OGwrAnOiAndScsXG4gICAgJ8OhwrvCqSc6ICd1JyxcbiAgICAnw6HCu8KxJzogJ3UnLFxuICAgICfDocK7wqsnOiAndScsXG4gICAgJ8OhwrvCrSc6ICd1JyxcbiAgICAnw6HCu8KvJzogJ3UnLFxuICAgICfDiMKXJzogJ3UnLFxuICAgICfDhcKrJzogJ3UnLFxuICAgICfDocK5wrsnOiAndScsXG4gICAgJ8OFwrMnOiAndScsXG4gICAgJ8OhwrbCmSc6ICd1JyxcbiAgICAnw4XCryc6ICd1JyxcbiAgICAnw4XCqSc6ICd1JyxcbiAgICAnw6HCucK5JzogJ3UnLFxuICAgICfDocK5wrUnOiAndScsXG4gICAgJ8OhwrXCqyc6ICd1ZScsXG4gICAgJ8Oqwp3CuCc6ICd1bScsXG4gICAgJ8OiwrHCtCc6ICd2JyxcbiAgICAnw6rCncKfJzogJ3YnLFxuICAgICfDocK5wr8nOiAndicsXG4gICAgJ8OKwosnOiAndicsXG4gICAgJ8OhwrbCjCc6ICd2JyxcbiAgICAnw6LCscKxJzogJ3YnLFxuICAgICfDocK5wr0nOiAndicsXG4gICAgJ8Oqwp3CoSc6ICd2eScsXG4gICAgJ8OhwrrCgyc6ICd3JyxcbiAgICAnw4XCtSc6ICd3JyxcbiAgICAnw6HCusKFJzogJ3cnLFxuICAgICfDocK6wocnOiAndycsXG4gICAgJ8OhwrrCiSc6ICd3JyxcbiAgICAnw6HCusKBJzogJ3cnLFxuICAgICfDosKxwrMnOiAndycsXG4gICAgJ8OhwrrCmCc6ICd3JyxcbiAgICAnw6HCusKNJzogJ3gnLFxuICAgICfDocK6wosnOiAneCcsXG4gICAgJ8OhwrbCjSc6ICd4JyxcbiAgICAnw4PCvSc6ICd5JyxcbiAgICAnw4XCtyc6ICd5JyxcbiAgICAnw4PCvyc6ICd5JyxcbiAgICAnw6HCusKPJzogJ3knLFxuICAgICfDocK7wrUnOiAneScsXG4gICAgJ8OhwrvCsyc6ICd5JyxcbiAgICAnw4bCtCc6ICd5JyxcbiAgICAnw6HCu8K3JzogJ3knLFxuICAgICfDocK7wr8nOiAneScsXG4gICAgJ8OIwrMnOiAneScsXG4gICAgJ8OhwrrCmSc6ICd5JyxcbiAgICAnw4nCjyc6ICd5JyxcbiAgICAnw6HCu8K5JzogJ3knLFxuICAgICfDhcK6JzogJ3onLFxuICAgICfDhcK+JzogJ3onLFxuICAgICfDocK6wpEnOiAneicsXG4gICAgJ8OKwpEnOiAneicsXG4gICAgJ8OiwrHCrCc6ICd6JyxcbiAgICAnw4XCvCc6ICd6JyxcbiAgICAnw6HCusKTJzogJ3onLFxuICAgICfDiMKlJzogJ3onLFxuICAgICfDocK6wpUnOiAneicsXG4gICAgJ8OhwrXCtic6ICd6JyxcbiAgICAnw6HCtsKOJzogJ3onLFxuICAgICfDisKQJzogJ3onLFxuICAgICfDhsK2JzogJ3onLFxuICAgICfDicKAJzogJ3onLFxuICAgICfDr8KswoAnOiAnZmYnLFxuICAgICfDr8KswoMnOiAnZmZpJyxcbiAgICAnw6/CrMKEJzogJ2ZmbCcsXG4gICAgJ8OvwqzCgSc6ICdmaScsXG4gICAgJ8OvwqzCgic6ICdmbCcsXG4gICAgJ8OEwrMnOiAnaWonLFxuICAgICfDhcKTJzogJ29lJyxcbiAgICAnw6/CrMKGJzogJ3N0JyxcbiAgICAnw6LCgsKQJzogJ2EnLFxuICAgICfDosKCwpEnOiAnZScsXG4gICAgJ8OhwrXCoic6ICdpJyxcbiAgICAnw6LCscK8JzogJ2onLFxuICAgICfDosKCwpInOiAnbycsXG4gICAgJ8OhwrXCoyc6ICdyJyxcbiAgICAnw6HCtcKkJzogJ3UnLFxuICAgICfDocK1wqUnOiAndicsXG4gICAgJ8OiwoLCkyc6ICd4J1xufTtcbiIsImltcG9ydCB7IFR5cGVhaGVhZERpcmVjdGl2ZSB9IGZyb20gJy4vdHlwZWFoZWFkLmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBjbGFzcyBUeXBlYWhlYWRPcHRpb25zIHtcbiAgcGxhY2VtZW50OiBzdHJpbmc7XG4gIGFuaW1hdGlvbjogYm9vbGVhbjtcbiAgdHlwZWFoZWFkUmVmOiBUeXBlYWhlYWREaXJlY3RpdmU7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogVHlwZWFoZWFkT3B0aW9ucykge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBUeXBlYWhlYWRNYXRjaCB7XG4gIHJlYWRvbmx5IHZhbHVlOiBzdHJpbmc7XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgcmVhZG9ubHkgaXRlbTogYW55O1xuICBwcm90ZWN0ZWQgaGVhZGVyOiBib29sZWFuO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIGNvbnN0cnVjdG9yKGl0ZW06IGFueSwgdmFsdWU6IHN0cmluZyA9IGl0ZW0sIGhlYWRlciA9IGZhbHNlKSB7XG4gICAgdGhpcy5pdGVtID0gaXRlbTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5oZWFkZXIgPSBoZWFkZXI7XG4gIH1cblxuICBpc0hlYWRlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oZWFkZXI7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBsYXRpbk1hcCB9IGZyb20gJy4vbGF0aW4tbWFwJztcblxuZXhwb3J0IGZ1bmN0aW9uIGxhdGluaXplKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1teQS1aYS16MC05XFxbXFxdIF0vZywgZnVuY3Rpb24gKGE6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxhdGluTWFwW2FdIHx8IGE7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlUmVnZXhwKHF1ZXJ5VG9Fc2NhcGU6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIFJlZ2V4OiBjYXB0dXJlIHRoZSB3aG9sZSBxdWVyeSBzdHJpbmcgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgc3RyaW5nXG4gIC8vIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1hdGNoIHRoZSByZXN1bHRzLCBmb3IgZXhhbXBsZSBpZiB0aGUgY2FwdHVyZSBpc1xuICAvLyAnYScgdGhlIHJlc3VsdCB3aWxsIGJlIFxcYVxuICByZXR1cm4gcXVlcnlUb0VzY2FwZS5yZXBsYWNlKC8oWy4/KiteJFtcXF1cXFxcKCl7fXwtXSkvZywgJ1xcXFwkMScpO1xufVxuXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplKHN0cjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRSZWdleERlbGltaXRlcnMgPSAnICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgcGhyYXNlUmVnZXhEZWxpbWl0ZXJzID0gJycpOiBBcnJheTxzdHJpbmc+IHtcbiAgLyogdHNsaW50OmVuYWJsZSAqL1xuICBjb25zdCByZWdleFN0ciA9IGAoPzpbJHtwaHJhc2VSZWdleERlbGltaXRlcnN9XSkoW14ke3BocmFzZVJlZ2V4RGVsaW1pdGVyc31dKylgICtcbiAgICBgKD86WyR7cGhyYXNlUmVnZXhEZWxpbWl0ZXJzfV0pfChbXiR7d29yZFJlZ2V4RGVsaW1pdGVyc31dKylgO1xuICBjb25zdCBwcmVUb2tlbml6ZWQ6IHN0cmluZ1tdID0gc3RyLnNwbGl0KG5ldyBSZWdFeHAocmVnZXhTdHIsICdnJykpO1xuICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IHByZVRva2VuaXplZExlbmd0aDogbnVtYmVyID0gcHJlVG9rZW5pemVkLmxlbmd0aDtcbiAgbGV0IHRva2VuOiBzdHJpbmc7XG4gIGNvbnN0IHJlcGxhY2VQaHJhc2VEZWxpbWl0ZXJzID0gbmV3IFJlZ0V4cChgWyR7cGhyYXNlUmVnZXhEZWxpbWl0ZXJzfV0rYCwgJ2cnKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByZVRva2VuaXplZExlbmd0aDsgaSArPSAxKSB7XG4gICAgdG9rZW4gPSBwcmVUb2tlbml6ZWRbaV07XG4gICAgaWYgKHRva2VuICYmIHRva2VuLmxlbmd0aCAmJiB0b2tlbiAhPT0gd29yZFJlZ2V4RGVsaW1pdGVycykge1xuICAgICAgcmVzdWx0LnB1c2godG9rZW4ucmVwbGFjZShyZXBsYWNlUGhyYXNlRGVsaW1pdGVycywgJycpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVGcm9tT2JqZWN0KG9iamVjdDogYW55LCBvcHRpb246IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghb3B0aW9uIHx8IHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9iamVjdC50b1N0cmluZygpO1xuICB9XG5cbiAgaWYgKG9wdGlvbi5lbmRzV2l0aCgnKCknKSkge1xuICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IG9wdGlvbi5zbGljZSgwLCBvcHRpb24ubGVuZ3RoIC0gMik7XG5cbiAgICByZXR1cm4gb2JqZWN0W2Z1bmN0aW9uTmFtZV0oKS50b1N0cmluZygpO1xuICB9XG5cbiAgY29uc3QgcHJvcGVydGllczogc3RyaW5nID0gb3B0aW9uXG4gICAgLnJlcGxhY2UoL1xcWyhcXHcrKVxcXS9nLCAnLiQxJylcbiAgICAucmVwbGFjZSgvXlxcLi8sICcnKTtcbiAgY29uc3QgcHJvcGVydGllc0FycmF5OiBzdHJpbmdbXSA9IHByb3BlcnRpZXMuc3BsaXQoJy4nKTtcblxuICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHByb3BlcnRpZXNBcnJheSkge1xuICAgIGlmIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgb2JqZWN0ID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgaWYgKCFvYmplY3QpIHtyZXR1cm4gJyc7IH1cblxuICByZXR1cm4gb2JqZWN0LnRvU3RyaW5nKCk7XG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgUXVlcnlMaXN0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBWaWV3Q2hpbGRyZW4sXG4gIFJlbmRlcmVyMlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNCczMsIFV0aWxzIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC91dGlscyc7XG5pbXBvcnQgeyBsYXRpbml6ZSB9IGZyb20gJy4vdHlwZWFoZWFkLXV0aWxzJztcbmltcG9ydCB7IFR5cGVhaGVhZE1hdGNoIH0gZnJvbSAnLi90eXBlYWhlYWQtbWF0Y2guY2xhc3MnO1xuaW1wb3J0IHsgVHlwZWFoZWFkRGlyZWN0aXZlIH0gZnJvbSAnLi90eXBlYWhlYWQuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndHlwZWFoZWFkLWNvbnRhaW5lcicsXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICB0ZW1wbGF0ZVVybDogJy4vdHlwZWFoZWFkLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2Ryb3Bkb3duIG9wZW4nLFxuICAgICdbY2xhc3MuZHJvcGRvd24tbWVudV0nOiAnaXNCczQnLFxuICAgICdbc3R5bGUub3ZlcmZsb3cteV0nIDogYGlzQnM0ICYmIG5lZWRTY3JvbGxiYXIgPyAnc2Nyb2xsJzogJ3Zpc2libGUnYCxcbiAgICAnW3N0eWxlLmhlaWdodF0nOiBgaXNCczQgJiYgbmVlZFNjcm9sbGJhciA/IGd1aUhlaWdodDogJ2F1dG8nYCxcbiAgICAnW3N0eWxlLnZpc2liaWxpdHldJzogYHR5cGVhaGVhZFNjcm9sbGFibGUgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJ2AsXG4gICAgJ1tjbGFzcy5kcm9wdXBdJzogJ2Ryb3B1cCcsXG4gICAgc3R5bGU6ICdwb3NpdGlvbjogYWJzb2x1dGU7ZGlzcGxheTogYmxvY2s7J1xuICB9LFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgOmhvc3QuZHJvcGRvd24ge1xuICAgICAgei1pbmRleDogMTAwMDtcbiAgICB9XG4gIGBcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUeXBlYWhlYWRDb250YWluZXJDb21wb25lbnQge1xuICBwYXJlbnQ6IFR5cGVhaGVhZERpcmVjdGl2ZTtcbiAgcXVlcnk6IHN0cmluZ1tdIHwgc3RyaW5nO1xuICBlbGVtZW50OiBFbGVtZW50UmVmO1xuICBpc0ZvY3VzZWQgPSBmYWxzZTtcbiAgdG9wOiBzdHJpbmc7XG4gIGxlZnQ6IHN0cmluZztcbiAgZGlzcGxheTogc3RyaW5nO1xuICBwbGFjZW1lbnQ6IHN0cmluZztcbiAgZHJvcHVwOiBib29sZWFuO1xuICBndWlIZWlnaHQ6IHN0cmluZztcbiAgbmVlZFNjcm9sbGJhcjogYm9vbGVhbjtcblxuICBnZXQgaXNCczQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICFpc0JzMygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9hY3RpdmU6IFR5cGVhaGVhZE1hdGNoO1xuICBwcm90ZWN0ZWQgX21hdGNoZXM6IFR5cGVhaGVhZE1hdGNoW10gPSBbXTtcblxuICBAVmlld0NoaWxkKCd1bEVsZW1lbnQnKVxuICBwcml2YXRlIHVsRWxlbWVudDogRWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkcmVuKCdsaUVsZW1lbnRzJylcbiAgcHJpdmF0ZSBsaUVsZW1lbnRzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgfVxuXG4gIGdldCBhY3RpdmUoKTogVHlwZWFoZWFkTWF0Y2gge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cblxuICBnZXQgbWF0Y2hlcygpOiBUeXBlYWhlYWRNYXRjaFtdIHtcbiAgICByZXR1cm4gdGhpcy5fbWF0Y2hlcztcbiAgfVxuXG4gIHNldCBtYXRjaGVzKHZhbHVlOiBUeXBlYWhlYWRNYXRjaFtdKSB7XG4gICAgdGhpcy5fbWF0Y2hlcyA9IHZhbHVlO1xuICAgIHRoaXMubmVlZFNjcm9sbGJhciA9IHRoaXMudHlwZWFoZWFkU2Nyb2xsYWJsZSAmJiB0aGlzLnR5cGVhaGVhZE9wdGlvbnNJblNjcm9sbGFibGVWaWV3IDwgdGhpcy5tYXRjaGVzLmxlbmd0aDtcbiAgICBpZiAodGhpcy50eXBlYWhlYWRTY3JvbGxhYmxlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTY3JvbGxhYmxlTW9kZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gdGhpcy5fbWF0Y2hlc1swXTtcbiAgICAgIGlmICh0aGlzLl9hY3RpdmUuaXNIZWFkZXIoKSkge1xuICAgICAgICB0aGlzLm5leHRBY3RpdmVNYXRjaCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBnZXQgb3B0aW9uc0xpc3RUZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5vcHRpb25zTGlzdFRlbXBsYXRlIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0IHR5cGVhaGVhZFNjcm9sbGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQudHlwZWFoZWFkU2Nyb2xsYWJsZSA6IGZhbHNlO1xuICB9XG5cblxuICBnZXQgdHlwZWFoZWFkT3B0aW9uc0luU2Nyb2xsYWJsZVZpZXcoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC50eXBlYWhlYWRPcHRpb25zSW5TY3JvbGxhYmxlVmlldyA6IDU7XG4gIH1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgZ2V0IGl0ZW1UZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC50eXBlYWhlYWRJdGVtVGVtcGxhdGUgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBzZWxlY3RBY3RpdmVNYXRjaChpc0FjdGl2ZUl0ZW1DaGFuZ2VkPzogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9hY3RpdmUgJiYgdGhpcy5wYXJlbnQudHlwZWFoZWFkU2VsZWN0Rmlyc3RJdGVtKSB7XG4gICAgICB0aGlzLnNlbGVjdE1hdGNoKHRoaXMuX2FjdGl2ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnBhcmVudC50eXBlYWhlYWRTZWxlY3RGaXJzdEl0ZW0gJiYgaXNBY3RpdmVJdGVtQ2hhbmdlZCkge1xuICAgICAgdGhpcy5zZWxlY3RNYXRjaCh0aGlzLl9hY3RpdmUpO1xuICAgIH1cbiAgfVxuXG4gIHByZXZBY3RpdmVNYXRjaCgpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMubWF0Y2hlcy5pbmRleE9mKHRoaXMuX2FjdGl2ZSk7XG4gICAgdGhpcy5fYWN0aXZlID0gdGhpcy5tYXRjaGVzW1xuICAgICAgaW5kZXggLSAxIDwgMCA/IHRoaXMubWF0Y2hlcy5sZW5ndGggLSAxIDogaW5kZXggLSAxXG4gICAgICBdO1xuICAgIGlmICh0aGlzLl9hY3RpdmUuaXNIZWFkZXIoKSkge1xuICAgICAgdGhpcy5wcmV2QWN0aXZlTWF0Y2goKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudHlwZWFoZWFkU2Nyb2xsYWJsZSkge1xuICAgICAgdGhpcy5zY3JvbGxQcmV2aW91cyhpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgbmV4dEFjdGl2ZU1hdGNoKCk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5tYXRjaGVzLmluZGV4T2YodGhpcy5fYWN0aXZlKTtcbiAgICB0aGlzLl9hY3RpdmUgPSB0aGlzLm1hdGNoZXNbXG4gICAgICBpbmRleCArIDEgPiB0aGlzLm1hdGNoZXMubGVuZ3RoIC0gMSA/IDAgOiBpbmRleCArIDFcbiAgICAgIF07XG4gICAgaWYgKHRoaXMuX2FjdGl2ZS5pc0hlYWRlcigpKSB7XG4gICAgICB0aGlzLm5leHRBY3RpdmVNYXRjaCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy50eXBlYWhlYWRTY3JvbGxhYmxlKSB7XG4gICAgICB0aGlzLnNjcm9sbE5leHQoaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHNlbGVjdEFjdGl2ZSh2YWx1ZTogVHlwZWFoZWFkTWF0Y2gpOiB2b2lkIHtcbiAgICB0aGlzLmlzRm9jdXNlZCA9IHRydWU7XG4gICAgdGhpcy5fYWN0aXZlID0gdmFsdWU7XG4gIH1cblxuICBoaWdobGlnaHQobWF0Y2g6IFR5cGVhaGVhZE1hdGNoLCBxdWVyeTogc3RyaW5nW10gfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCBpdGVtU3RyOiBzdHJpbmcgPSBtYXRjaC52YWx1ZTtcbiAgICBsZXQgaXRlbVN0ckhlbHBlcjogc3RyaW5nID0gKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnR5cGVhaGVhZExhdGluaXplXG4gICAgICA/IGxhdGluaXplKGl0ZW1TdHIpXG4gICAgICA6IGl0ZW1TdHIpLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IHN0YXJ0SWR4OiBudW1iZXI7XG4gICAgbGV0IHRva2VuTGVuOiBudW1iZXI7XG4gICAgLy8gUmVwbGFjZXMgdGhlIGNhcHR1cmUgc3RyaW5nIHdpdGggdGhlIHNhbWUgc3RyaW5nIGluc2lkZSBvZiBhIFwic3Ryb25nXCIgdGFnXG4gICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5TGVuOiBudW1iZXIgPSBxdWVyeS5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXJ5TGVuOyBpICs9IDEpIHtcbiAgICAgICAgLy8gcXVlcnlbaV0gaXMgYWxyZWFkeSBsYXRpbml6ZWQgYW5kIGxvd2VyIGNhc2VcbiAgICAgICAgc3RhcnRJZHggPSBpdGVtU3RySGVscGVyLmluZGV4T2YocXVlcnlbaV0pO1xuICAgICAgICB0b2tlbkxlbiA9IHF1ZXJ5W2ldLmxlbmd0aDtcbiAgICAgICAgaWYgKHN0YXJ0SWR4ID49IDAgJiYgdG9rZW5MZW4gPiAwKSB7XG4gICAgICAgICAgaXRlbVN0ciA9XG4gICAgICAgICAgICBgJHtpdGVtU3RyLnN1YnN0cmluZygwLCBzdGFydElkeCl9PHN0cm9uZz4ke2l0ZW1TdHIuc3Vic3RyaW5nKHN0YXJ0SWR4LCBzdGFydElkeCArIHRva2VuTGVuKX08L3N0cm9uZz5gICtcbiAgICAgICAgICAgIGAke2l0ZW1TdHIuc3Vic3RyaW5nKHN0YXJ0SWR4ICsgdG9rZW5MZW4pfWA7XG4gICAgICAgICAgaXRlbVN0ckhlbHBlciA9XG4gICAgICAgICAgICBgJHtpdGVtU3RySGVscGVyLnN1YnN0cmluZygwLCBzdGFydElkeCl9ICAgICAgICAkeycgJy5yZXBlYXQodG9rZW5MZW4pfSAgICAgICAgIGAgK1xuICAgICAgICAgICAgYCR7aXRlbVN0ckhlbHBlci5zdWJzdHJpbmcoc3RhcnRJZHggKyB0b2tlbkxlbil9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocXVlcnkpIHtcbiAgICAgIC8vIHF1ZXJ5IGlzIGFscmVhZHkgbGF0aW5pemVkIGFuZCBsb3dlciBjYXNlXG4gICAgICBzdGFydElkeCA9IGl0ZW1TdHJIZWxwZXIuaW5kZXhPZihxdWVyeSk7XG4gICAgICB0b2tlbkxlbiA9IHF1ZXJ5Lmxlbmd0aDtcbiAgICAgIGlmIChzdGFydElkeCA+PSAwICYmIHRva2VuTGVuID4gMCkge1xuICAgICAgICBpdGVtU3RyID1cbiAgICAgICAgICBgJHtpdGVtU3RyLnN1YnN0cmluZygwLCBzdGFydElkeCl9PHN0cm9uZz4ke2l0ZW1TdHIuc3Vic3RyaW5nKHN0YXJ0SWR4LCBzdGFydElkeCArIHRva2VuTGVuKX08L3N0cm9uZz5gICtcbiAgICAgICAgICBgJHtpdGVtU3RyLnN1YnN0cmluZyhzdGFydElkeCArIHRva2VuTGVuKX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVtU3RyO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICBmb2N1c0xvc3QoKTogdm9pZCB7XG4gICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlzQWN0aXZlKHZhbHVlOiBUeXBlYWhlYWRNYXRjaCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmUgPT09IHZhbHVlO1xuICB9XG5cbiAgc2VsZWN0TWF0Y2godmFsdWU6IFR5cGVhaGVhZE1hdGNoLCBlOiBFdmVudCA9IHZvaWQgMCk6IGJvb2xlYW4ge1xuICAgIGlmIChlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudC5jaGFuZ2VNb2RlbCh2YWx1ZSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnBhcmVudC50eXBlYWhlYWRPblNlbGVjdC5lbWl0KHZhbHVlKSwgMCk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzZXRTY3JvbGxhYmxlTW9kZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMudWxFbGVtZW50KSB7XG4gICAgICB0aGlzLnVsRWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICB9XG4gICAgaWYgKHRoaXMubGlFbGVtZW50cy5maXJzdCkge1xuICAgICAgY29uc3QgdWxTdHlsZXMgPSBVdGlscy5nZXRTdHlsZXModGhpcy51bEVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICBjb25zdCBsaVN0eWxlcyA9IFV0aWxzLmdldFN0eWxlcyh0aGlzLmxpRWxlbWVudHMuZmlyc3QubmF0aXZlRWxlbWVudCk7XG4gICAgICBjb25zdCB1bFBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KCh1bFN0eWxlc1sncGFkZGluZy1ib3R0b20nXSA/IHVsU3R5bGVzWydwYWRkaW5nLWJvdHRvbSddIDogJycpXG4gICAgICAgIC5yZXBsYWNlKCdweCcsICcnKSk7XG4gICAgICBjb25zdCB1bFBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KCh1bFN0eWxlc1sncGFkZGluZy10b3AnXSA/IHVsU3R5bGVzWydwYWRkaW5nLXRvcCddIDogJzAnKVxuICAgICAgICAucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgY29uc3Qgb3B0aW9uSGVpZ2h0ID0gcGFyc2VGbG9hdCgobGlTdHlsZXMuaGVpZ2h0ID8gbGlTdHlsZXMuaGVpZ2h0IDogJzAnKVxuICAgICAgICAucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy50eXBlYWhlYWRPcHRpb25zSW5TY3JvbGxhYmxlVmlldyAqIG9wdGlvbkhlaWdodDtcbiAgICAgIHRoaXMuZ3VpSGVpZ2h0ID0gYCR7aGVpZ2h0ICsgdWxQYWRkaW5nVG9wICsgdWxQYWRkaW5nQm90dG9tfXB4YDtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICB9XG5cbiAgc2Nyb2xsUHJldmlvdXMoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgdGhpcy5zY3JvbGxUb0JvdHRvbSgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmxpRWxlbWVudHMpIHtcbiAgICAgIGNvbnN0IGxpRWxlbWVudCA9IHRoaXMubGlFbGVtZW50cy50b0FycmF5KClbaW5kZXggLSAxXTtcbiAgICAgIGlmIChsaUVsZW1lbnQgJiYgIXRoaXMuaXNTY3JvbGxlZEludG9WaWV3KGxpRWxlbWVudC5uYXRpdmVFbGVtZW50KSkge1xuICAgICAgICB0aGlzLnVsRWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9IGxpRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzY3JvbGxOZXh0KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoaW5kZXggKyAxID4gdGhpcy5tYXRjaGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5saUVsZW1lbnRzKSB7XG4gICAgICBjb25zdCBsaUVsZW1lbnQgPSB0aGlzLmxpRWxlbWVudHMudG9BcnJheSgpW2luZGV4ICsgMV07XG4gICAgICBpZiAobGlFbGVtZW50ICYmICF0aGlzLmlzU2Nyb2xsZWRJbnRvVmlldyhsaUVsZW1lbnQubmF0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgdGhpcy51bEVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxUb3AgPVxuICAgICAgICAgIGxpRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFRvcCAtXG4gICAgICAgICAgTnVtYmVyKHRoaXMudWxFbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArXG4gICAgICAgICAgTnVtYmVyKGxpRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICBwcml2YXRlIGlzU2Nyb2xsZWRJbnRvVmlldyA9IGZ1bmN0aW9uIChlbGVtOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGNvbnRhaW5lclZpZXdUb3A6IG51bWJlciA9IHRoaXMudWxFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IGNvbnRhaW5lclZpZXdCb3R0b20gPSBjb250YWluZXJWaWV3VG9wICsgTnVtYmVyKHRoaXMudWxFbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0KTtcbiAgICBjb25zdCBlbGVtVG9wID0gZWxlbS5vZmZzZXRUb3A7XG4gICAgY29uc3QgZWxlbUJvdHRvbSA9IGVsZW1Ub3AgKyBlbGVtLm9mZnNldEhlaWdodDtcblxuICAgIHJldHVybiAoKGVsZW1Cb3R0b20gPD0gY29udGFpbmVyVmlld0JvdHRvbSkgJiYgKGVsZW1Ub3AgPj0gY29udGFpbmVyVmlld1RvcCkpO1xuICB9O1xuXG4gIHByaXZhdGUgc2Nyb2xsVG9Cb3R0b20oKTogdm9pZCB7XG4gICAgdGhpcy51bEVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxUb3AgPSB0aGlzLnVsRWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgfVxuXG4gIHByaXZhdGUgc2Nyb2xsVG9Ub3AoKTogdm9pZCB7XG4gICAgdGhpcy51bEVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBEZWZhdWx0IHZhbHVlcyBwcm92aWRlciBmb3IgdHlwZWFoZWFkICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHlwZWFoZWFkQ29uZmlnIHtcbiAgLyoqIHVzZWQgdG8gaGlkZSByZXN1bHRzIG9uIGJsdXIgKi9cbiAgaGlkZVJlc3VsdHNPbkJsdXIgPSB0cnVlO1xuICAvKiogdXNlZCB0byBjaG9vc2UgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lciAqL1xuICBzZWxlY3RGaXJzdEl0ZW0gPSB0cnVlO1xuICAvKiogdXNlZCB0byBjaG9vc2Ugc2V0IG1pbmltYWwgbm8gb2YgY2hhcmFjdGVycyB0aGF0IG5lZWRzIHRvXG4gICAqIGJlIGVudGVyZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgKi9cbiAgbWluTGVuZ3RoID0gMTtcbn1cbiIsIi8qIHRzbGludDpkaXNhYmxlOm1heC1maWxlLWxpbmUtY291bnQgKi9cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgZnJvbSwgU3Vic2NyaXB0aW9uLCBpc09ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbXBvbmVudExvYWRlciwgQ29tcG9uZW50TG9hZGVyRmFjdG9yeSB9IGZyb20gJ25neC1ib290c3RyYXAvY29tcG9uZW50LWxvYWRlcic7XG5pbXBvcnQgeyBUeXBlYWhlYWRDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL3R5cGVhaGVhZC1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFR5cGVhaGVhZE1hdGNoIH0gZnJvbSAnLi90eXBlYWhlYWQtbWF0Y2guY2xhc3MnO1xuaW1wb3J0IHsgVHlwZWFoZWFkQ29uZmlnIH0gZnJvbSAnLi90eXBlYWhlYWQuY29uZmlnJztcbmltcG9ydCB7IGdldFZhbHVlRnJvbU9iamVjdCwgbGF0aW5pemUsIHRva2VuaXplIH0gZnJvbSAnLi90eXBlYWhlYWQtdXRpbHMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBmaWx0ZXIsIG1lcmdlTWFwLCBzd2l0Y2hNYXAsIHRvQXJyYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnW3R5cGVhaGVhZF0nLCBleHBvcnRBczogJ2JzLXR5cGVhaGVhZCd9KVxuZXhwb3J0IGNsYXNzIFR5cGVhaGVhZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLyoqIG9wdGlvbnMgc291cmNlLCBjYW4gYmUgQXJyYXkgb2Ygc3RyaW5ncywgb2JqZWN0cyBvclxuICAgKiBhbiBPYnNlcnZhYmxlIGZvciBleHRlcm5hbCBtYXRjaGluZyBwcm9jZXNzXG4gICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgdHlwZWFoZWFkOiBhbnk7XG4gIC8qKiBtaW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0byBiZSBlbnRlcmVkIGJlZm9yZVxuICAgKiB0eXBlYWhlYWQga2lja3MtaW4uIFdoZW4gc2V0IHRvIDAsIHR5cGVhaGVhZCBzaG93cyBvbiBmb2N1cyB3aXRoIGZ1bGxcbiAgICogbGlzdCBvZiBvcHRpb25zIChsaW1pdGVkIGFzIG5vcm1hbCBieSB0eXBlYWhlYWRPcHRpb25zTGltaXQpXG4gICAqL1xuICBASW5wdXQoKSB0eXBlYWhlYWRNaW5MZW5ndGg6IG51bWJlciA9IHZvaWQgMDtcbiAgLyoqIG1pbmltYWwgd2FpdCB0aW1lIGFmdGVyIGxhc3QgY2hhcmFjdGVyIHR5cGVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW4gKi9cbiAgQElucHV0KCkgdHlwZWFoZWFkV2FpdE1zOiBudW1iZXI7XG4gIC8qKiBtYXhpbXVtIGxlbmd0aCBvZiBvcHRpb25zIGl0ZW1zIGxpc3QuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDIwICovXG4gIEBJbnB1dCgpIHR5cGVhaGVhZE9wdGlvbnNMaW1pdDogbnVtYmVyO1xuICAvKiogd2hlbiBvcHRpb25zIHNvdXJjZSBpcyBhbiBhcnJheSBvZiBvYmplY3RzLCB0aGUgbmFtZSBvZiBmaWVsZFxuICAgKiB0aGF0IGNvbnRhaW5zIHRoZSBvcHRpb25zIHZhbHVlLCB3ZSB1c2UgYXJyYXkgaXRlbSBhcyBvcHRpb24gaW4gY2FzZVxuICAgKiBvZiB0aGlzIGZpZWxkIGlzIG1pc3NpbmcuIFN1cHBvcnRzIG5lc3RlZCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICAgKi9cbiAgQElucHV0KCkgdHlwZWFoZWFkT3B0aW9uRmllbGQ6IHN0cmluZztcbiAgLyoqIHdoZW4gb3B0aW9ucyBzb3VyY2UgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cywgdGhlIG5hbWUgb2YgZmllbGQgdGhhdFxuICAgKiBjb250YWlucyB0aGUgZ3JvdXAgdmFsdWUsIG1hdGNoZXMgYXJlIGdyb3VwZWQgYnkgdGhpcyBmaWVsZCB3aGVuIHNldC5cbiAgICovXG4gIEBJbnB1dCgpIHR5cGVhaGVhZEdyb3VwRmllbGQ6IHN0cmluZztcbiAgLyoqIHNob3VsZCBiZSB1c2VkIG9ubHkgaW4gY2FzZSBvZiB0eXBlYWhlYWQgYXR0cmlidXRlIGlzIGFycmF5LlxuICAgKiBJZiB0cnVlIC0gbG9hZGluZyBvZiBvcHRpb25zIHdpbGwgYmUgYXN5bmMsIG90aGVyd2lzZSAtIHN5bmMuXG4gICAqIHRydWUgbWFrZSBzZW5zZSBpZiBvcHRpb25zIGFycmF5IGlzIGxhcmdlLlxuICAgKi9cbiAgQElucHV0KCkgdHlwZWFoZWFkQXN5bmM6IGJvb2xlYW4gPSB2b2lkIDA7XG4gIC8qKiBtYXRjaCBsYXRpbiBzeW1ib2xzLlxuICAgKiBJZiB0cnVlIHRoZSB3b3JkIHPDg8K6cGVyIHdvdWxkIG1hdGNoIHN1cGVyIGFuZCB2aWNlIHZlcnNhLlxuICAgKi9cbiAgQElucHV0KCkgdHlwZWFoZWFkTGF0aW5pemUgPSB0cnVlO1xuICAvKiogQ2FuIGJlIHVzZSB0byBzZWFyY2ggd29yZHMgYnkgaW5zZXJ0aW5nIGEgc2luZ2xlIHdoaXRlIHNwYWNlIGJldHdlZW4gZWFjaCBjaGFyYWN0ZXJzXG4gICAqICBmb3IgZXhhbXBsZSAnQyBhIGwgaSBmIG8gciBuIGkgYScgd2lsbCBtYXRjaCAnQ2FsaWZvcm5pYScuXG4gICAqL1xuICBASW5wdXQoKSB0eXBlYWhlYWRTaW5nbGVXb3JkcyA9IHRydWU7XG4gIC8qKiBzaG91bGQgYmUgdXNlZCBvbmx5IGluIGNhc2UgdHlwZWFoZWFkU2luZ2xlV29yZHMgYXR0cmlidXRlIGlzIHRydWUuXG4gICAqIFNldHMgdGhlIHdvcmQgZGVsaW1pdGVyIHRvIGJyZWFrIHdvcmRzLiBEZWZhdWx0cyB0byBzcGFjZS5cbiAgICovXG4gIEBJbnB1dCgpIHR5cGVhaGVhZFdvcmREZWxpbWl0ZXJzID0gJyAnO1xuICAvKiogc2hvdWxkIGJlIHVzZWQgb25seSBpbiBjYXNlIHR5cGVhaGVhZFNpbmdsZVdvcmRzIGF0dHJpYnV0ZSBpcyB0cnVlLlxuICAgKiBTZXRzIHRoZSB3b3JkIGRlbGltaXRlciB0byBtYXRjaCBleGFjdCBwaHJhc2UuXG4gICAqIERlZmF1bHRzIHRvIHNpbXBsZSBhbmQgZG91YmxlIHF1b3Rlcy5cbiAgICovXG4gIEBJbnB1dCgpIHR5cGVhaGVhZFBocmFzZURlbGltaXRlcnMgPSAnXFwnXCInO1xuICAvKiogdXNlZCB0byBzcGVjaWZ5IGEgY3VzdG9tIGl0ZW0gdGVtcGxhdGUuXG4gICAqIFRlbXBsYXRlIHZhcmlhYmxlcyBleHBvc2VkIGFyZSBjYWxsZWQgaXRlbSBhbmQgaW5kZXg7XG4gICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgdHlwZWFoZWFkSXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAvKiogdXNlZCB0byBzcGVjaWZ5IGEgY3VzdG9tIG9wdGlvbnMgbGlzdCB0ZW1wbGF0ZS5cbiAgICogVGVtcGxhdGUgdmFyaWFibGVzOiBtYXRjaGVzLCBpdGVtVGVtcGxhdGUsIHF1ZXJ5XG4gICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQElucHV0KCkgb3B0aW9uc0xpc3RUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgLyoqIHNwZWNpZmllcyBpZiB0eXBlYWhlYWQgaXMgc2Nyb2xsYWJsZSAgKi9cbiAgQElucHV0KCkgdHlwZWFoZWFkU2Nyb2xsYWJsZSA9IGZhbHNlO1xuICAvKiogc3BlY2lmaWVzIG51bWJlciBvZiBvcHRpb25zIHRvIHNob3cgaW4gc2Nyb2xsIHZpZXcgICovXG4gIEBJbnB1dCgpIHR5cGVhaGVhZE9wdGlvbnNJblNjcm9sbGFibGVWaWV3ID0gNTtcbiAgLyoqIHVzZWQgdG8gaGlkZSByZXN1bHQgb24gYmx1ciAqL1xuICBASW5wdXQoKSB0eXBlYWhlYWRIaWRlUmVzdWx0c09uQmx1cjogYm9vbGVhbjtcbiAgLyoqIGZpcmVkIHdoZW4gYW4gb3B0aW9ucyBsaXN0IHdhcyBvcGVuZWQgYW5kIHRoZSB1c2VyIGNsaWNrZWQgVGFiXG4gICAqIElmIGEgdmFsdWUgZXF1YWwgdHJ1ZSwgaXQgd2lsbCBiZSBjaG9zZW4gZmlyc3Qgb3IgYWN0aXZlIGl0ZW0gaW4gdGhlIGxpc3RcbiAgICogSWYgdmFsdWUgZXF1YWwgZmFsc2UsIGl0IHdpbGwgYmUgY2hvc2VuIGFuIGFjdGl2ZSBpdGVtIGluIHRoZSBsaXN0IG9yIG5vdGhpbmdcbiAgICovXG4gIEBJbnB1dCgpIHR5cGVhaGVhZFNlbGVjdEZpcnN0SXRlbSA9IHRydWU7XG4gIC8qKiBmaXJlZCB3aGVuICdidXN5JyBzdGF0ZSBvZiB0aGlzIGNvbXBvbmVudCB3YXMgY2hhbmdlZCxcbiAgICogZmlyZWQgb24gYXN5bmMgbW9kZSBvbmx5LCByZXR1cm5zIGJvb2xlYW5cbiAgICovXG4gIEBPdXRwdXQoKSB0eXBlYWhlYWRMb2FkaW5nID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICAvKiogZmlyZWQgb24gZXZlcnkga2V5IGV2ZW50IGFuZCByZXR1cm5zIHRydWVcbiAgICogaW4gY2FzZSBvZiBtYXRjaGVzIGFyZSBub3QgZGV0ZWN0ZWRcbiAgICovXG4gIEBPdXRwdXQoKSB0eXBlYWhlYWROb1Jlc3VsdHMgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIC8qKiBmaXJlZCB3aGVuIG9wdGlvbiB3YXMgc2VsZWN0ZWQsIHJldHVybiBvYmplY3Qgd2l0aCBkYXRhIG9mIHRoaXMgb3B0aW9uICovXG4gIEBPdXRwdXQoKSB0eXBlYWhlYWRPblNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8VHlwZWFoZWFkTWF0Y2g+KCk7XG4gIC8qKiBmaXJlZCB3aGVuIGJsdXIgZXZlbnQgb2NjdXJzLiByZXR1cm5zIHRoZSBhY3RpdmUgaXRlbSAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgQE91dHB1dCgpIHR5cGVhaGVhZE9uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBBIHNlbGVjdG9yIHNwZWNpZnlpbmcgdGhlIGVsZW1lbnQgdGhlIHR5cGVhaGVhZCBzaG91bGQgYmUgYXBwZW5kZWQgdG8uXG4gICAqIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIFwiYm9keVwiLlxuICAgKi9cbiAgQElucHV0KCkgY29udGFpbmVyOiBzdHJpbmc7XG5cbiAgLyoqIFRoaXMgYXR0cmlidXRlIGluZGljYXRlcyB0aGF0IHRoZSBkcm9wZG93biBzaG91bGQgYmUgb3BlbmVkIHVwd2FyZHMgKi9cbiAgQElucHV0KCkgZHJvcHVwID0gZmFsc2U7XG5cbiAgLy8gbm90IHlldCBpbXBsZW1lbnRlZFxuICAvKiogaWYgZmFsc2UgcmVzdHJpY3QgbW9kZWwgdmFsdWVzIHRvIHRoZSBvbmVzIHNlbGVjdGVkIGZyb20gdGhlIHBvcHVwIG9ubHkgd2lsbCBiZSBwcm92aWRlZCAqL1xuICAvLyBASW5wdXQoKSBwcm90ZWN0ZWQgdHlwZWFoZWFkRWRpdGFibGU6Ym9vbGVhbjtcbiAgLyoqIGlmIGZhbHNlIHRoZSBmaXJzdCBtYXRjaCBhdXRvbWF0aWNhbGx5IHdpbGwgbm90IGJlIGZvY3VzZWQgYXMgeW91IHR5cGUgKi9cbiAgLy8gQElucHV0KCkgcHJvdGVjdGVkIHR5cGVhaGVhZEZvY3VzRmlyc3Q6Ym9vbGVhbjtcbiAgLyoqIGZvcm1hdCB0aGUgbmctbW9kZWwgcmVzdWx0IGFmdGVyIHNlbGVjdGlvbiAqL1xuICAvLyBASW5wdXQoKSBwcm90ZWN0ZWQgdHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXI6YW55O1xuICAvKiogaWYgdHJ1ZSBhdXRvbWF0aWNhbGx5IHNlbGVjdCBhbiBpdGVtIHdoZW4gdGhlcmUgaXMgb25lIG9wdGlvbiB0aGF0IGV4YWN0bHkgbWF0Y2hlcyB0aGUgdXNlciBpbnB1dCAqL1xuICAvLyBASW5wdXQoKSBwcm90ZWN0ZWQgdHlwZWFoZWFkU2VsZWN0T25FeGFjdDpib29sZWFuO1xuICAvKiogIGlmIHRydWUgc2VsZWN0IHRoZSBjdXJyZW50bHkgaGlnaGxpZ2h0ZWQgbWF0Y2ggb24gYmx1ciAqL1xuICAvLyBASW5wdXQoKSBwcm90ZWN0ZWQgdHlwZWFoZWFkU2VsZWN0T25CbHVyOmJvb2xlYW47XG4gIC8qKiAgaWYgZmFsc2UgZG9uJ3QgZm9jdXMgdGhlIGlucHV0IGVsZW1lbnQgdGhlIHR5cGVhaGVhZCBkaXJlY3RpdmUgaXMgYXNzb2NpYXRlZCB3aXRoIG9uIHNlbGVjdGlvbiAqL1xuICAgIC8vIEBJbnB1dCgpIHByb3RlY3RlZCB0eXBlYWhlYWRGb2N1c09uU2VsZWN0OmJvb2xlYW47XG5cbiAgX2NvbnRhaW5lcjogVHlwZWFoZWFkQ29udGFpbmVyQ29tcG9uZW50O1xuICBpc0FjdGl2ZUl0ZW1DaGFuZ2VkID0gZmFsc2U7XG4gIGlzVHlwZWFoZWFkT3B0aW9uc0xpc3RBY3RpdmUgPSBmYWxzZTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIHByb3RlY3RlZCBrZXlVcEV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHByb3RlY3RlZCBfbWF0Y2hlczogVHlwZWFoZWFkTWF0Y2hbXTtcbiAgcHJvdGVjdGVkIHBsYWNlbWVudCA9ICdib3R0b20tbGVmdCc7XG4gIC8vIHByb3RlY3RlZCBwb3B1cDpDb21wb25lbnRSZWY8VHlwZWFoZWFkQ29udGFpbmVyQ29tcG9uZW50PjtcblxuICBwcml2YXRlIF90eXBlYWhlYWQ6IENvbXBvbmVudExvYWRlcjxUeXBlYWhlYWRDb250YWluZXJDb21wb25lbnQ+O1xuICBwcml2YXRlIF9zdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICBwcml2YXRlIF9vdXRzaWRlQ2xpY2tMaXN0ZW5lcjogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ0NvbnRyb2w6IE5nQ29udHJvbCxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIGNvbmZpZzogVHlwZWFoZWFkQ29uZmlnLFxuICAgICAgICAgICAgICBjaXM6IENvbXBvbmVudExvYWRlckZhY3RvcnksXG4gICAgICAgICAgICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuXG4gICAgdGhpcy5fdHlwZWFoZWFkID0gY2lzLmNyZWF0ZUxvYWRlcjxUeXBlYWhlYWRDb250YWluZXJDb21wb25lbnQ+KFxuICAgICAgZWxlbWVudCxcbiAgICAgIHZpZXdDb250YWluZXJSZWYsXG4gICAgICByZW5kZXJlclxuICAgIClcbiAgICAgIC5wcm92aWRlKHsgcHJvdmlkZTogVHlwZWFoZWFkQ29uZmlnLCB1c2VWYWx1ZTogY29uZmlnIH0pO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLFxuICAgICAgeyB0eXBlYWhlYWRIaWRlUmVzdWx0c09uQmx1cjogY29uZmlnLmhpZGVSZXN1bHRzT25CbHVyLFxuICAgICAgICAgICAgICAgdHlwZWFoZWFkU2VsZWN0Rmlyc3RJdGVtOiBjb25maWcuc2VsZWN0Rmlyc3RJdGVtLFxuICAgICAgICAgICAgICAgdHlwZWFoZWFkTWluTGVuZ3RoOiBjb25maWcubWluTGVuZ3RoXG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMudHlwZWFoZWFkT3B0aW9uc0xpbWl0ID0gdGhpcy50eXBlYWhlYWRPcHRpb25zTGltaXQgfHwgMjA7XG5cbiAgICB0aGlzLnR5cGVhaGVhZE1pbkxlbmd0aCA9XG4gICAgICB0aGlzLnR5cGVhaGVhZE1pbkxlbmd0aCA9PT0gdm9pZCAwID8gMSA6IHRoaXMudHlwZWFoZWFkTWluTGVuZ3RoO1xuXG4gICAgdGhpcy50eXBlYWhlYWRXYWl0TXMgPSB0aGlzLnR5cGVhaGVhZFdhaXRNcyB8fCAwO1xuXG4gICAgLy8gYXN5bmMgc2hvdWxkIGJlIGZhbHNlIGluIGNhc2Ugb2YgYXJyYXlcbiAgICBpZiAoXG4gICAgICB0aGlzLnR5cGVhaGVhZEFzeW5jID09PSB1bmRlZmluZWQgJiZcbiAgICAgICEoaXNPYnNlcnZhYmxlKHRoaXMudHlwZWFoZWFkKSlcbiAgICApIHtcbiAgICAgIHRoaXMudHlwZWFoZWFkQXN5bmMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYnNlcnZhYmxlKHRoaXMudHlwZWFoZWFkKSkge1xuICAgICAgdGhpcy50eXBlYWhlYWRBc3luYyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHlwZWFoZWFkQXN5bmMpIHtcbiAgICAgIHRoaXMuYXN5bmNBY3Rpb25zKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3luY0FjdGlvbnMoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcsIFsnJGV2ZW50J10pXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgb25JbnB1dChlOiBhbnkpOiB2b2lkIHtcbiAgICAvLyBGb3IgYDxpbnB1dD5gcywgdXNlIHRoZSBgdmFsdWVgIHByb3BlcnR5LiBGb3Igb3RoZXJzIHRoYXQgZG9uJ3QgaGF2ZSBhXG4gICAgLy8gYHZhbHVlYCAoc3VjaCBhcyBgPHNwYW4gY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiPmApLCB1c2UgZWl0aGVyXG4gICAgLy8gYHRleHRDb250ZW50YCBvciBgaW5uZXJUZXh0YCAoZGVwZW5kaW5nIG9uIHdoaWNoIG9uZSBpcyBzdXBwb3J0ZWQsIGkuZS5cbiAgICAvLyBGaXJlZm94IG9yIElFKS5cbiAgICBjb25zdCB2YWx1ZSA9XG4gICAgICBlLnRhcmdldC52YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZS50YXJnZXQudmFsdWVcbiAgICAgICAgOiBlLnRhcmdldC50ZXh0Q29udGVudCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZS50YXJnZXQudGV4dENvbnRlbnRcbiAgICAgICAgOiBlLnRhcmdldC5pbm5lclRleHQ7XG4gICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUudHJpbSgpLmxlbmd0aCA+PSB0aGlzLnR5cGVhaGVhZE1pbkxlbmd0aCkge1xuICAgICAgdGhpcy50eXBlYWhlYWRMb2FkaW5nLmVtaXQodHJ1ZSk7XG4gICAgICB0aGlzLmtleVVwRXZlbnRFbWl0dGVyLmVtaXQoZS50YXJnZXQudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnR5cGVhaGVhZExvYWRpbmcuZW1pdChmYWxzZSk7XG4gICAgICB0aGlzLnR5cGVhaGVhZE5vUmVzdWx0cy5lbWl0KGZhbHNlKTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleXVwJywgWyckZXZlbnQnXSlcbiAgb25DaGFuZ2UoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAvLyBlc2NcbiAgICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGVwcmVjYXRpb24gKi9cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyNyB8fCBldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gdXBcbiAgICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGVwcmVjYXRpb24gKi9cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzOCB8fCBldmVudC5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgICB0aGlzLmlzQWN0aXZlSXRlbUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9jb250YWluZXIucHJldkFjdGl2ZU1hdGNoKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBkb3duXG4gICAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRlcHJlY2F0aW9uICovXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gNDAgfHwgZXZlbnQua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICB0aGlzLmlzQWN0aXZlSXRlbUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9jb250YWluZXIubmV4dEFjdGl2ZU1hdGNoKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnKVxuICBvbkZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnR5cGVhaGVhZE1pbkxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy50eXBlYWhlYWRMb2FkaW5nLmVtaXQodHJ1ZSk7XG4gICAgICB0aGlzLmtleVVwRXZlbnRFbWl0dGVyLmVtaXQodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUgfHwgJycpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICBvbkJsdXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2NvbnRhaW5lciAmJiAhdGhpcy5fY29udGFpbmVyLmlzRm9jdXNlZCkge1xuICAgICAgdGhpcy50eXBlYWhlYWRPbkJsdXIuZW1pdCh0aGlzLl9jb250YWluZXIuYWN0aXZlKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgb25LZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgLy8gbm8gY29udGFpbmVyIC0gbm8gcHJvYmxlbXNcbiAgICBpZiAoIXRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGVwcmVjYXRpb24gKi9cbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gOSB8fCBldmVudC5rZXkgPT09ICdUYWInIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzIHx8IGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICh0aGlzLnR5cGVhaGVhZFNlbGVjdEZpcnN0SXRlbSkge1xuICAgICAgICB0aGlzLl9jb250YWluZXIuc2VsZWN0QWN0aXZlTWF0Y2goKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy50eXBlYWhlYWRTZWxlY3RGaXJzdEl0ZW0pIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnNlbGVjdEFjdGl2ZU1hdGNoKHRoaXMuaXNBY3RpdmVJdGVtQ2hhbmdlZCk7XG4gICAgICAgIHRoaXMuaXNBY3RpdmVJdGVtQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjaGFuZ2VNb2RlbChtYXRjaDogVHlwZWFoZWFkTWF0Y2gpOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZVN0cjogc3RyaW5nID0gbWF0Y2gudmFsdWU7XG4gICAgdGhpcy5uZ0NvbnRyb2wudmlld1RvTW9kZWxVcGRhdGUodmFsdWVTdHIpO1xuICAgICh0aGlzLm5nQ29udHJvbC5jb250cm9sKS5zZXRWYWx1ZSh2YWx1ZVN0cik7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rpb24ubWFya0ZvckNoZWNrKCk7XG4gICAgdGhpcy5oaWRlKCk7XG4gIH1cblxuICBnZXQgbWF0Y2hlcygpOiBUeXBlYWhlYWRNYXRjaFtdIHtcbiAgICByZXR1cm4gdGhpcy5fbWF0Y2hlcztcbiAgfVxuXG4gIHNob3coKTogdm9pZCB7XG4gICAgdGhpcy5fdHlwZWFoZWFkXG4gICAgICAuYXR0YWNoKFR5cGVhaGVhZENvbnRhaW5lckNvbXBvbmVudClcbiAgICAgIC8vIHRvZG86IGFkZCBhcHBlbmQgdG8gYm9keSwgYWZ0ZXIgdXBkYXRpbmcgcG9zaXRpb25pbmcgc2VydmljZVxuICAgICAgLnRvKHRoaXMuY29udGFpbmVyKVxuICAgICAgLnBvc2l0aW9uKHthdHRhY2htZW50OiBgJHt0aGlzLmRyb3B1cCA/ICd0b3AnIDogJ2JvdHRvbSd9IGxlZnRgfSlcbiAgICAgIC5zaG93KHtcbiAgICAgICAgdHlwZWFoZWFkUmVmOiB0aGlzLFxuICAgICAgICBwbGFjZW1lbnQ6IHRoaXMucGxhY2VtZW50LFxuICAgICAgICBhbmltYXRpb246IGZhbHNlLFxuICAgICAgICBkcm9wdXA6IHRoaXMuZHJvcHVwXG4gICAgICB9KTtcblxuICAgIHRoaXMuX291dHNpZGVDbGlja0xpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ2RvY3VtZW50JywgJ2NsaWNrJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLnR5cGVhaGVhZE1pbkxlbmd0aCA9PT0gMCAmJiB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy50eXBlYWhlYWRIaWRlUmVzdWx0c09uQmx1ciB8fCB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHRoaXMub25PdXRzaWRlQ2xpY2soKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2NvbnRhaW5lciA9IHRoaXMuX3R5cGVhaGVhZC5pbnN0YW5jZTtcbiAgICB0aGlzLl9jb250YWluZXIucGFyZW50ID0gdGhpcztcbiAgICAvLyBUaGlzIGltcHJvdmVzIHRoZSBzcGVlZCBhcyBpdCB3b24ndCBoYXZlIHRvIGJlIGRvbmUgZm9yIGVhY2ggbGlzdCBpdGVtXG4gICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0gKHRoaXMudHlwZWFoZWFkTGF0aW5pemVcbiAgICAgID8gbGF0aW5pemUodGhpcy5uZ0NvbnRyb2wuY29udHJvbC52YWx1ZSlcbiAgICAgIDogdGhpcy5uZ0NvbnRyb2wuY29udHJvbC52YWx1ZSlcbiAgICAgIC50b1N0cmluZygpXG4gICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLl9jb250YWluZXIucXVlcnkgPSB0aGlzLnR5cGVhaGVhZFNpbmdsZVdvcmRzXG4gICAgICA/IHRva2VuaXplKFxuICAgICAgICBub3JtYWxpemVkUXVlcnksXG4gICAgICAgIHRoaXMudHlwZWFoZWFkV29yZERlbGltaXRlcnMsXG4gICAgICAgIHRoaXMudHlwZWFoZWFkUGhyYXNlRGVsaW1pdGVyc1xuICAgICAgKVxuICAgICAgOiBub3JtYWxpemVkUXVlcnk7XG4gICAgdGhpcy5fY29udGFpbmVyLm1hdGNoZXMgPSB0aGlzLl9tYXRjaGVzO1xuICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICBoaWRlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl90eXBlYWhlYWQuaXNTaG93bikge1xuICAgICAgdGhpcy5fdHlwZWFoZWFkLmhpZGUoKTtcbiAgICAgIHRoaXMuX291dHNpZGVDbGlja0xpc3RlbmVyKCk7XG4gICAgICB0aGlzLl9jb250YWluZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIG9uT3V0c2lkZUNsaWNrKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9jb250YWluZXIgJiYgIXRoaXMuX2NvbnRhaW5lci5pc0ZvY3VzZWQpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIC8vIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnNcbiAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLl9zdWJzY3JpcHRpb25zKSB7XG4gICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgdGhpcy5fdHlwZWFoZWFkLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luY0FjdGlvbnMoKTogdm9pZCB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy5rZXlVcEV2ZW50RW1pdHRlclxuICAgICAgICAucGlwZShcbiAgICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy50eXBlYWhlYWRXYWl0TXMpLFxuICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLnR5cGVhaGVhZClcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKChtYXRjaGVzOiBUeXBlYWhlYWRNYXRjaFtdKSA9PiB7XG4gICAgICAgICAgdGhpcy5maW5hbGl6ZUFzeW5jQ2FsbChtYXRjaGVzKTtcbiAgICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bmNBY3Rpb25zKCk6IHZvaWQge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMua2V5VXBFdmVudEVtaXR0ZXJcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgZGVib3VuY2VUaW1lKHRoaXMudHlwZWFoZWFkV2FpdE1zKSxcbiAgICAgICAgICBtZXJnZU1hcCgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0gdGhpcy5ub3JtYWxpemVRdWVyeSh2YWx1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmcm9tKHRoaXMudHlwZWFoZWFkKVxuICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKG9wdGlvbjogVHlwZWFoZWFkTWF0Y2gpID0+IHtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdE1hdGNoKHRoaXMubm9ybWFsaXplT3B0aW9uKG9wdGlvbiksIG5vcm1hbGl6ZWRRdWVyeSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdG9BcnJheSgpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKChtYXRjaGVzOiBUeXBlYWhlYWRNYXRjaFtdKSA9PiB7XG4gICAgICAgICAgdGhpcy5maW5hbGl6ZUFzeW5jQ2FsbChtYXRjaGVzKTtcbiAgICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBwcm90ZWN0ZWQgbm9ybWFsaXplT3B0aW9uKG9wdGlvbjogYW55KTogYW55IHtcbiAgICBjb25zdCBvcHRpb25WYWx1ZTogc3RyaW5nID0gZ2V0VmFsdWVGcm9tT2JqZWN0KFxuICAgICAgb3B0aW9uLFxuICAgICAgdGhpcy50eXBlYWhlYWRPcHRpb25GaWVsZFxuICAgICk7XG4gICAgY29uc3Qgbm9ybWFsaXplZE9wdGlvbiA9IHRoaXMudHlwZWFoZWFkTGF0aW5pemVcbiAgICAgID8gbGF0aW5pemUob3B0aW9uVmFsdWUpXG4gICAgICA6IG9wdGlvblZhbHVlO1xuXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRPcHRpb24udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBub3JtYWxpemVRdWVyeSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHwgc3RyaW5nW10ge1xuICAgIC8vIElmIHNpbmdsZVdvcmRzLCBicmVhayBtb2RlbCBoZXJlIHRvIG5vdCBiZSBkb2luZyBleHRyYSB3b3JrIG9uIGVhY2hcbiAgICAvLyBpdGVyYXRpb25cbiAgICBsZXQgbm9ybWFsaXplZFF1ZXJ5OiBzdHJpbmcgfCBzdHJpbmdbXSA9ICh0aGlzLnR5cGVhaGVhZExhdGluaXplXG4gICAgICA/IGxhdGluaXplKHZhbHVlKVxuICAgICAgOiB2YWx1ZSlcbiAgICAgIC50b1N0cmluZygpXG4gICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICBub3JtYWxpemVkUXVlcnkgPSB0aGlzLnR5cGVhaGVhZFNpbmdsZVdvcmRzXG4gICAgICA/IHRva2VuaXplKFxuICAgICAgICBub3JtYWxpemVkUXVlcnksXG4gICAgICAgIHRoaXMudHlwZWFoZWFkV29yZERlbGltaXRlcnMsXG4gICAgICAgIHRoaXMudHlwZWFoZWFkUGhyYXNlRGVsaW1pdGVyc1xuICAgICAgKVxuICAgICAgOiBub3JtYWxpemVkUXVlcnk7XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZFF1ZXJ5O1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlc3RNYXRjaChtYXRjaDogc3RyaW5nLCB0ZXN0OiBzdHJpbmdbXSB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGxldCBzcGFjZUxlbmd0aDogbnVtYmVyO1xuXG4gICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgc3BhY2VMZW5ndGggPSB0ZXN0Lmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhY2VMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAodGVzdFtpXS5sZW5ndGggPiAwICYmIG1hdGNoLmluZGV4T2YodGVzdFtpXSkgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaC5pbmRleE9mKHRlc3QpID49IDA7XG4gIH1cblxuICBwcm90ZWN0ZWQgZmluYWxpemVBc3luY0NhbGwobWF0Y2hlczogVHlwZWFoZWFkTWF0Y2hbXSk6IHZvaWQge1xuICAgIHRoaXMucHJlcGFyZU1hdGNoZXMobWF0Y2hlcyB8fCBbXSk7XG5cbiAgICB0aGlzLnR5cGVhaGVhZExvYWRpbmcuZW1pdChmYWxzZSk7XG4gICAgdGhpcy50eXBlYWhlYWROb1Jlc3VsdHMuZW1pdCghdGhpcy5oYXNNYXRjaGVzKCkpO1xuXG4gICAgaWYgKCF0aGlzLmhhc01hdGNoZXMoKSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAvLyBmaXg6IHJlbW92ZSB1c2FnZSBvZiBuZ0NvbnRyb2wgaW50ZXJuYWxzXG4gICAgICBjb25zdCBfY29udHJvbFZhbHVlID0gKHRoaXMudHlwZWFoZWFkTGF0aW5pemVcbiAgICAgICAgPyBsYXRpbml6ZSh0aGlzLm5nQ29udHJvbC5jb250cm9sLnZhbHVlKVxuICAgICAgICA6IHRoaXMubmdDb250cm9sLmNvbnRyb2wudmFsdWUpIHx8ICcnO1xuICAgICAgLy8gVGhpcyBpbXByb3ZlcyB0aGUgc3BlZWQgYXMgaXQgd29uJ3QgaGF2ZSB0byBiZSBkb25lIGZvciBlYWNoIGxpc3QgaXRlbVxuICAgICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0gX2NvbnRyb2xWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0aGlzLl9jb250YWluZXIucXVlcnkgPSB0aGlzLnR5cGVhaGVhZFNpbmdsZVdvcmRzXG4gICAgICAgID8gdG9rZW5pemUoXG4gICAgICAgICAgbm9ybWFsaXplZFF1ZXJ5LFxuICAgICAgICAgIHRoaXMudHlwZWFoZWFkV29yZERlbGltaXRlcnMsXG4gICAgICAgICAgdGhpcy50eXBlYWhlYWRQaHJhc2VEZWxpbWl0ZXJzXG4gICAgICAgIClcbiAgICAgICAgOiBub3JtYWxpemVkUXVlcnk7XG4gICAgICB0aGlzLl9jb250YWluZXIubWF0Y2hlcyA9IHRoaXMuX21hdGNoZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBwcmVwYXJlTWF0Y2hlcyhvcHRpb25zOiBUeXBlYWhlYWRNYXRjaFtdKTogdm9pZCB7XG4gICAgY29uc3QgbGltaXRlZDogVHlwZWFoZWFkTWF0Y2hbXSA9IG9wdGlvbnMuc2xpY2UoMCwgdGhpcy50eXBlYWhlYWRPcHRpb25zTGltaXQpO1xuXG4gICAgaWYgKHRoaXMudHlwZWFoZWFkR3JvdXBGaWVsZCkge1xuICAgICAgbGV0IG1hdGNoZXM6IFR5cGVhaGVhZE1hdGNoW10gPSBbXTtcblxuICAgICAgLy8gZXh0cmFjdCBhbGwgZ3JvdXAgbmFtZXNcbiAgICAgIGNvbnN0IGdyb3VwcyA9IGxpbWl0ZWRcbiAgICAgICAgLm1hcCgob3B0aW9uOiBUeXBlYWhlYWRNYXRjaCkgPT5cbiAgICAgICAgICBnZXRWYWx1ZUZyb21PYmplY3Qob3B0aW9uLCB0aGlzLnR5cGVhaGVhZEdyb3VwRmllbGQpXG4gICAgICAgIClcbiAgICAgICAgLmZpbHRlcigodjogc3RyaW5nLCBpOiBudW1iZXIsIGE6IHN0cmluZ1tdKSA9PiBhLmluZGV4T2YodikgPT09IGkpO1xuXG4gICAgICBncm91cHMuZm9yRWFjaCgoZ3JvdXA6IHN0cmluZykgPT4ge1xuICAgICAgICAvLyBhZGQgZ3JvdXAgaGVhZGVyIHRvIGFycmF5IG9mIG1hdGNoZXNcbiAgICAgICAgbWF0Y2hlcy5wdXNoKG5ldyBUeXBlYWhlYWRNYXRjaChncm91cCwgZ3JvdXAsIHRydWUpKTtcblxuICAgICAgICAvLyBhZGQgZWFjaCBpdGVtIG9mIGdyb3VwIHRvIGFycmF5IG9mIG1hdGNoZXNcbiAgICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMuY29uY2F0KFxuICAgICAgICAgIGxpbWl0ZWRcbiAgICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgICAgICAgKG9wdGlvbjogYW55KSA9PlxuICAgICAgICAgICAgICAgIGdldFZhbHVlRnJvbU9iamVjdChvcHRpb24sIHRoaXMudHlwZWFoZWFkR3JvdXBGaWVsZCkgPT09IGdyb3VwXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAgICAgICAgIChvcHRpb246IGFueSkgPT5cbiAgICAgICAgICAgICAgICBuZXcgVHlwZWFoZWFkTWF0Y2goXG4gICAgICAgICAgICAgICAgICBvcHRpb24sXG4gICAgICAgICAgICAgICAgICBnZXRWYWx1ZUZyb21PYmplY3Qob3B0aW9uLCB0aGlzLnR5cGVhaGVhZE9wdGlvbkZpZWxkKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9tYXRjaGVzID0gbWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbWF0Y2hlcyA9IGxpbWl0ZWQubWFwKFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAgIChvcHRpb246IGFueSkgPT5cbiAgICAgICAgICBuZXcgVHlwZWFoZWFkTWF0Y2goXG4gICAgICAgICAgICBvcHRpb24sXG4gICAgICAgICAgICBnZXRWYWx1ZUZyb21PYmplY3Qob3B0aW9uLCB0aGlzLnR5cGVhaGVhZE9wdGlvbkZpZWxkKVxuICAgICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGhhc01hdGNoZXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX21hdGNoZXMubGVuZ3RoID4gMDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFR5cGVhaGVhZENvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vdHlwZWFoZWFkLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgVHlwZWFoZWFkRGlyZWN0aXZlIH0gZnJvbSAnLi90eXBlYWhlYWQuZGlyZWN0aXZlJztcbmltcG9ydCB7IENvbXBvbmVudExvYWRlckZhY3RvcnkgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2NvbXBvbmVudC1sb2FkZXInO1xuaW1wb3J0IHsgUG9zaXRpb25pbmdTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3NpdGlvbmluZyc7XG5pbXBvcnQgeyBUeXBlYWhlYWRDb25maWcgfSBmcm9tICcuL3R5cGVhaGVhZC5jb25maWcnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbVHlwZWFoZWFkQ29udGFpbmVyQ29tcG9uZW50LCBUeXBlYWhlYWREaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbVHlwZWFoZWFkQ29udGFpbmVyQ29tcG9uZW50LCBUeXBlYWhlYWREaXJlY3RpdmVdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtUeXBlYWhlYWRDb250YWluZXJDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFR5cGVhaGVhZE1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogVHlwZWFoZWFkTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbQ29tcG9uZW50TG9hZGVyRmFjdG9yeSwgUG9zaXRpb25pbmdTZXJ2aWNlLCBUeXBlYWhlYWRDb25maWddXG4gICAgfTtcbiAgfVxufVxuIl19